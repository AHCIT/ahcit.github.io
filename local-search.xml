<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次索引失效引发的Lock wait timeout exceeded排查经验</title>
    <link href="/2024/12/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%BC%95%E5%8F%91%E7%9A%84Lock-wait-timeout-exceeded%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/"/>
    <url>/2024/12/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%BC%95%E5%8F%91%E7%9A%84Lock-wait-timeout-exceeded%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天想和大家聊的是关于线上<code>Lock wait timeout exceeded</code>问题的排查与可行的解决思路。之所以想聊这个也是因为自己在排查的过程中发现，很多问题只有自己亲自花时间去研究、去解决才有机会迎接挑战、收获经验。</p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>近期在浏览线上订单业务的监控页面时，发现订单创建接口耗时模块存在大量尖刺。有些调用的耗时甚至达到了50s以上。作为一名强迫症患者看着这个监控页面属实给我整急了，我立马去看了下该接口的相关代码，好奇是哪位神仙埋下的大坑（之前负责订单业务的同事换部门了bushi）。很快啊，我就啪啪打脸，创建订单的代码非常正常，没啥耗时的RPC调用、手动锁表之类的操作。到此我能猜到问题大概率出在MySQL上面，但是具体还需要进一步排查。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>针对监控中尖刺点，我首先通过尖刺点的时间在ELK日志系统上定位到了关联时间段内的日志。其中有一条日志是这样的（见图2）,显然监控上面很多次调用卡在50s左右的直接原因就是获取锁超时了。为啥一条简单的插入语句能够触发锁等待超时呢？真相只有一个，订单表被其他事务触发表级锁了。而针对Mysql，常见的引发原因有以下几种：</p><ol><li>显式使用 <code>LOCK TABLES</code> 命令</li><li>UPDATE 或 DELETE 语句没有使用索引</li><li>显式使用<code>LOCK IN SHARE MODE</code> 和 <code>FOR UPDATE</code></li><li>全表扫描导致的锁</li></ol><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/be1dbf881fa2419e8a584a68e8882c96~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ0lU:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTYzMjE1NTA5MjkxNTA2OSJ9&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1734452005&x-orig-sign=btai0ECFB7nRuNU3JY9qQMzqB10=" alt="image.png"></p><p align=center>图 1.订单创建接口调用耗时监控图</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/3ce6a9805b5341509c5d7b572a7f893d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ0lU:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTYzMjE1NTA5MjkxNTA2OSJ9&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1734452005&x-orig-sign=HjOZyvI4ImkZAU2g7FQMdaO6Qt8=" alt="image.png"></p><p align=center>图 2.订单插入接口错误堆栈图</p>通过一轮的代码筛查后，我可以断定并非由前三个原因而是因为索引失效引发全表扫描导致的。为啥这么肯定？请看以下代码片段，这么多查询组合，都能走索引吗？显然不能。在MySQL中，当出现了索引失效的情况时，MySQL会对整张表进行扫描，逐行读取数据，检查是否符合查询条件。这种操作会极大增加查询的执行时间，特别是在数据量大的情况下，性能损耗明显。如果此时另一个事务尝试插入数据，且插入的数据会导致行级锁冲突（例如插入的数据与扫描的数据范围重叠），就可能会发生锁等待。结合具体的业务代码，问题的答案也有了：查询时索引失效引发了锁表，导致同一时刻的Insert操作锁等待异常。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Unions_Charging_Order_Base_Where_Condition&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_a!= null and data.column_a!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.column_a = #&#123;data.column_a&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_b!= null and data.column_b!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and us.column_b = #&#123;data.column_b&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&#x27;data.column_c!= null and data.column_c!= &quot;&quot; and data.column_c!= &quot;2&quot;&#x27;</span>&gt;</span><br>        and us.column_c = #&#123;data.column_c&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&#x27;data.column_c!= null and data.column_c!= &quot;&quot; and data.column_c == &quot;2&quot;&#x27;</span>&gt;</span><br>        and us.column_c in (2,12)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_d!= null and data.column_d!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.column_d = #&#123;data.column_d&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_e!= null and data.column_e!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.`column_e` = #&#123;data.column_e&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_f!= null and data.column_f!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.`column_f` = #&#123;data.column_f&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_g!= null and data.column_g!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.column_g = #&#123;data.column_g&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_h!= null and data.column_h!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.status = #&#123;data.column_h&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_i!= null&quot;</span>&gt;</span><br>        and co.column_i = #&#123;data.column_i&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_j!= null and data.column_j!= &#x27;&#x27;&quot;</span>&gt;</span><br>        &lt;![CDATA[ and co.end_time &gt;= #&#123;data.column_j&#125; ]]&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_k!= null and data.column_k!= &#x27;&#x27;&quot;</span>&gt;</span><br>        &lt;![CDATA[ and co.end_time &lt;= #&#123;data.column_k&#125; ]]&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_l!= null and data.column_l!= &#x27;&#x27;&quot;</span>&gt;</span><br>        &lt;![CDATA[ and co.start_time &gt;= #&#123;data.column_l&#125; ]]&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_m!= null and data.column_m!= &#x27;&#x27;&quot;</span>&gt;</span><br>        &lt;![CDATA[ and co.start_time &lt;= #&#123;data.column_m&#125; ]]&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;data.column_n!= null and data.column_n!= &#x27;&#x27;&quot;</span>&gt;</span><br>        and co.column_a in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;data.column_n&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;item&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面这种情况是一个非常典型的索引失效案例。这个查询条件的组合情况太多，在面对复杂条件查询时往往会引发全表扫描，这种全表扫描会拖慢全局的业务处理速度，极端情况下可能会引起服务的雪崩。这里重点说一下索引失效可能带来的危害:</p><ol><li><p><strong>全表扫描</strong>：</p><ul><li>如果查询条件没有匹配到索引，MySQL 会对整张表进行扫描，逐行读取数据，检查是否符合查询条件。这种操作会极大增加查询的执行时间，特别是在数据量大的情况下，性能损耗明显。</li><li>全表扫描的情况通常出现在没有合适的索引，或者查询条件未能有效利用现有的索引时。</li></ul></li><li><p><strong>增加 I&#x2F;O 开销</strong>：</p><ul><li>在全表扫描的过程中，MySQL 需要从磁盘读取大量的行数据。这会导致磁盘 I&#x2F;O 增加，尤其是当表中的数据量很大时，性能会显著下降。</li><li>如果数据存储在磁盘上而不是内存中，I&#x2F;O 开销尤为严重。</li></ul></li><li><p><strong>缓存命中率下降</strong>：</p><ul><li>如果查询没有使用索引，MySQL 必须读取更多的行，导致更多的数据被加载到缓存中，进而可能影响其他查询的缓存命中率，造成缓存竞争。</li></ul></li><li><p><strong>锁的竞争</strong>：</p><ul><li>在高并发的环境下，如果查询没有使用索引，可能导致锁的竞争更严重。特别是在写操作较多的场景下，全表扫描可能会持有更长时间的锁，从而影响其他查询和写操作的执行效率。</li></ul></li><li><p><strong>查询响应时间变慢</strong>：</p><ul><li>由于全表扫描需要逐行检查数据，查询的响应时间会显著增加。特别是在需要计算聚合函数（如 <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>）或者 <code>JOIN</code> 操作的情况下，性能问题更加明显。</li></ul></li><li><p><strong>查询优化器选择不当</strong>：</p><ul><li>如果查询语句写得不够优化（例如，条件顺序不合理或者没有显式提示 MySQL 使用某个索引），MySQL 的查询优化器可能选择不使用索引。这也可能导致查询效率降低。</li></ul></li></ol><p>说点题外话，我相信在一开始，这段代码肯定是满足正常业务需求的，只是随着业务的更新迭代，这个地方的查询条件越来越臃肿，同时伴随着业务数据量的逐年攀升，这段代码的性能问题也逐渐暴露。虽然我们可以通过添加索引的方式，尝试解决这个问题，但是终归不是一个好的解决方案。后面打算写一篇如何基于Elasticsearch+Canal+RabbitMQ的完成订单搜索，实现订单数据的读写分离。</p><p>最后如果大家觉得这篇文章能给你带来些许收获的话，麻烦给我点个赞吧。如果你有自己的独到见解，也欢迎在评论区批评指教。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>索引</tag>
      
      <tag>线上问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次RabbitMQ消息堆积问题排查与解决经历</title>
    <link href="/2024/05/20/%E8%AE%B0%E4%B8%80%E6%AC%A1RabbitMQ%E6%B6%88%E6%81%AF%E5%A0%86%E7%A7%AF%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/"/>
    <url>/2024/05/20/%E8%AE%B0%E4%B8%80%E6%AC%A1RabbitMQ%E6%B6%88%E6%81%AF%E5%A0%86%E7%A7%AF%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次RabbitMQ消息堆积问题排查与解决经历"><a href="#记一次RabbitMQ消息堆积问题排查与解决经历" class="headerlink" title="记一次RabbitMQ消息堆积问题排查与解决经历"></a>记一次RabbitMQ消息堆积问题排查与解决经历</h1><p>今天想和大家聊一下，最近线上遇到的一个问题。这个问题是隔壁团队爆出来的，由于我跟他们组长关系还不错，就一起帮着看一下了，没想到一看还真让我找到了。最后发现原因其实不复杂，主要是排查过程上可能走了一些弯路。为了保护公司隐私，我会在后续的描述中把业务上的内容先屏蔽掉。</p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>近期，公司对接了一个大客户，该客户会向我们平台RabbitMQ发送相关的硬件数据。平台针对这类硬件数据，采用了InfluxDB来进行存储，以往都没有出现过问题。但是在对接该客户的数据后，RabbitMQ堵了。当时隔壁组的第一反应是去查看消费者的执行逻辑，看一下是否存在需要优化的点。事实是当时的消费者逻辑确实也存在问题，他们优化了一版之后，立刻进行了上线。然而消息堆积的现象依然会出现，最后没有办法，只能定时重启InfluxDB。其实到这里大家肯定猜到是InfluxDB的问题了，但实际上却不能说完全是InfluxDB的问题。</p><h2 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h2><p>循着背景我继续往下说，产生消息堆积的直接原因肯定是消费者处理速度跟不上。那么造成处理速度缓慢的原因又是什么呢？首先我想到的是消费者内部的处理逻辑存在长耗时的操作，但是排查下来都很正常。那显然不是程序逻辑的问题了。接着肯定是要排查中间件的问题了，我问了下隔壁组，他们说InfluxDB的CPU、IO占用都很正常。到这里就有点奇怪了，但是本着怀疑的精神我还是去看了他们组的InfluxDB监控，确实如他们所说，CPU、IO都没到瓶颈。但是我却发现了大量的Client Error，这表明有大量的客户端在请求连接InfluxDB的时候失败了。联想到RabbitMQ消息堆积的现象，我初步判断，应该是RabbitMQ消息产生的速度过快，导致消费者一直要去连接InfluxDB发送处理后的数据，最终导致InfluxDB连接耗尽，后续的消费者线程无法再与InfluxDB发起连接。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee8718433af842eba25f86db07b61511~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3562&h=1603&s=1498419&e=png&b=222126" alt="image.png"><br>接着我去看了RabbitMQ那边的情况，有几个队列会周期性的发送大量消息，这个数量下确实会导致消费者频繁地申请InfluxDB连接。可能有的朋友会说，难道你们没有使用连接池吗？我去查了下源码，它还真没有用【手动捂脸】。这个消费者服务引用的InfluxDB组件是GitHub上的一个<a href="https://github.com/miwurster/spring-data-influxdb">开源项目</a> 有好多年没更新了。在读写数据过程中全是直接申请InfluxDB连接的，这种操作，在并发不高的情形下估计还能撑住，一旦并发量上来了，InfluxDB必然不可用了，就这消息不堆积都有鬼了。另外我发现，这个InfluxDB的配置项里面最大连接数设置的是100，我看着CPU和IO的数据，陷入了沉思(emmmm…)</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/827b336fc0cb44d08a0086037545234f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3775&h=1212&s=159252&e=png&b=222225" alt="image.png"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过上面的原因分析知道，问题产生的根本原因就是没有对数据库连接数做控制。那解决的方案就是加个连接池呗，然后说到连接池这玩意儿，我之前是真没自己实现过。本着求真务实的态度，怎么着也得试试。</p><h3 id="连接池原理"><a href="#连接池原理" class="headerlink" title="连接池原理"></a>连接池原理</h3><p>在说连接池以前先说一下对象池。众所周知，Java是一门面向对象的语言，JVM中每时每刻都在创造着新的对象。这其中有一些对象其实没有必要一直重复创建销毁的过程。过日子就得讲究一个精打细算嘛，能重复利用咱就别折腾了。这部分对象给他分配个池子，让它们泡着就行。谁要用拿去用就是，用完记得还回来就行。连接池的原理其实也是这样，我们可以定义好一组数据库连接对象实例，由需要发起数据库连接的线程自己去借用，然后完成对应的数据库操作，这样的话，无论有多少线程需要发起数据库连接，他们能创建的数据库连接的上限都不会超多连接池指定的上限。关于线程等待的问题，就涉及到连接池参数调优的问题了，这里就不讨论了。</p><h3 id="基于连接池重写InfluxDB连接组件"><a href="#基于连接池重写InfluxDB连接组件" class="headerlink" title="基于连接池重写InfluxDB连接组件"></a>基于连接池重写<code>InfluxDB</code>连接组件</h3><p>连接池的实现我们可以借助Apache Commons Pool来完成。它主要由几个关键接口和类组成。最核心的是<code>ObjectPool</code>接口，它定义了对象池的基本操作，例如借用对象(<code>borrowObject</code>)、返还对象(<code>returnObject</code>)等。然后是<code>PooledObjectFactory</code>接口，这是一个用于创建和管理池对象生命周期的工厂接口。通常，当我们需要将自定义的对象放入对象池时，就需要实现这个接口。说干就干，代码走起</p><h4 id="1、-实现PooledObjectFactory，创建一个对象工厂"><a href="#1、-实现PooledObjectFactory，创建一个对象工厂" class="headerlink" title="1、 实现PooledObjectFactory，创建一个对象工厂"></a>1、 实现<code>PooledObjectFactory</code>，创建一个对象工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.influxdb;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.pool2.PooledObject;<br><span class="hljs-keyword">import</span> org.apache.commons.pool2.PooledObjectFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.pool2.impl.DefaultPooledObject;<br><span class="hljs-keyword">import</span> org.influxdb.InfluxDB;<br><span class="hljs-keyword">import</span> org.influxdb.InfluxDBFactory;<br><span class="hljs-keyword">import</span> org.influxdb.dto.Pong;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Richard</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBPooledObjectFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PooledObjectFactory</span>&lt;InfluxDB&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(InfluxDBPooledObjectFactory.class);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> InfluxDBProperties properties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBPooledObjectFactory</span><span class="hljs-params">(InfluxDBProperties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重新初始化要由池返回的实例-即从池中借用一个对象时调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pooledObject 一个PooledObject包装要激活的实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">activateObject</span><span class="hljs-params">(PooledObject&lt;InfluxDB&gt; pooledObject)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        logger.debug(<span class="hljs-string">&quot;InfluxDB connection was borrowed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用默认 (NORMAL) DestroyMode 销毁池不再需要的实例。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pooledObject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyObject</span><span class="hljs-params">(PooledObject&lt;InfluxDB&gt; pooledObject)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">influxDBClient</span> <span class="hljs-operator">=</span> pooledObject.getObject();<br>        influxDBClient.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建可由池提供服务的实例，并将其包装在由池管理的PooledObject中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PooledObject&lt;InfluxDB&gt; <span class="hljs-title function_">makeObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> InfluxDBFactory.connect(properties.getUrl(), properties.getUsername(),<br>                properties.getPassword());<br>        <span class="hljs-keyword">if</span> (properties.isGzip()) &#123;<br>            connection.enableGzip();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPooledObject</span>&lt;&gt;(connection);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消初始化要返回到空闲对象池的实例-即从池中归还一个对象时调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pooledObject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">passivateObject</span><span class="hljs-params">(PooledObject&lt;InfluxDB&gt; pooledObject)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        logger.debug(<span class="hljs-string">&quot;InfluxDB connection was returned!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 确保实例可以安全地由池返回。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pooledObject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果obj无效并且应该从池中删除，则为false ，否则为true</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateObject</span><span class="hljs-params">(PooledObject&lt;InfluxDB&gt; pooledObject)</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">influxDBClient</span> <span class="hljs-operator">=</span> pooledObject.getObject();<br>        <span class="hljs-type">Pong</span> <span class="hljs-variable">pong</span> <span class="hljs-operator">=</span> influxDBClient.ping();<br>        <span class="hljs-keyword">return</span> pong.isGood();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、创建对象池，继承GenericObjectPool"><a href="#2、创建对象池，继承GenericObjectPool" class="headerlink" title="2、创建对象池，继承GenericObjectPool"></a>2、创建对象池，继承<code>GenericObjectPool</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.influxdb;<br><br><span class="hljs-keyword">import</span> org.apache.commons.pool2.PooledObjectFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.pool2.impl.AbandonedConfig;<br><span class="hljs-keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPool;<br><span class="hljs-keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;<br><span class="hljs-keyword">import</span> org.influxdb.InfluxDB;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Richard</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBClientPool</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericObjectPool</span>&lt;InfluxDB&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBClientPool</span><span class="hljs-params">(PooledObjectFactory&lt;InfluxDB&gt; factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(factory);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBClientPool</span><span class="hljs-params">(PooledObjectFactory&lt;InfluxDB&gt; factory, GenericObjectPoolConfig&lt;InfluxDB&gt; config)</span> &#123;<br>        <span class="hljs-built_in">super</span>(factory, config);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBClientPool</span><span class="hljs-params">(PooledObjectFactory&lt;InfluxDB&gt; factory, GenericObjectPoolConfig&lt;InfluxDB&gt; config, AbandonedConfig abandonedConfig)</span> &#123;<br>        <span class="hljs-built_in">super</span>(factory, config, abandonedConfig);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、创建对象池自动装配配置类，将对象池做成一个Bean"><a href="#3、创建对象池自动装配配置类，将对象池做成一个Bean" class="headerlink" title="3、创建对象池自动装配配置类，将对象池做成一个Bean"></a>3、创建对象池自动装配配置类，将对象池做成一个<code>Bean</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.influxdb;<br><br><span class="hljs-keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;<br><span class="hljs-keyword">import</span> org.influxdb.InfluxDB;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.annotation.PreDestroy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象池自动装配</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Richard</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(InfluxDBProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBPoolAutoConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> InfluxDBClientPool pool;<br><br><br>    <span class="hljs-meta">@Bean(&quot;influxDBClientPool&quot;)</span><br>    <span class="hljs-keyword">protected</span> InfluxDBClientPool <span class="hljs-title function_">createInfluxDBClientPool</span><span class="hljs-params">(InfluxDBProperties properties)</span> &#123;<br>        <span class="hljs-comment">// 创建对象工厂</span><br>        <span class="hljs-type">InfluxDBPooledObjectFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfluxDBPooledObjectFactory</span>(properties);<br>        <span class="hljs-comment">// 设置对象池相关参数</span><br>        GenericObjectPoolConfig&lt;InfluxDB&gt; poolConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericObjectPoolConfig</span>&lt;&gt;();<br>        InfluxDBProperties.<span class="hljs-type">Pool</span> <span class="hljs-variable">poolProperty</span> <span class="hljs-operator">=</span> properties.getPool();<br>        poolConfig.setMaxIdle(poolProperty.getMaxIdle());<br>        poolConfig.setMaxTotal(poolProperty.getMaxActive());<br>        poolConfig.setMinIdle(poolProperty.getMinIdle());<br>        poolConfig.setMaxWait(poolProperty.getMaxWait());<br>        poolConfig.setTimeBetweenEvictionRuns(poolProperty.getTimeBetweenEvictionRuns());<br>        poolConfig.setBlockWhenExhausted(<span class="hljs-literal">true</span>);<br>        poolConfig.setTestOnBorrow(<span class="hljs-literal">true</span>);<br>        poolConfig.setTestOnReturn(<span class="hljs-literal">true</span>);<br>        poolConfig.setTestWhileIdle(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//一定要关闭jmx，不然springboot启动会报已经注册了某个jmx的错误</span><br>        poolConfig.setJmxEnabled(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 新建一个对象池,传入对象工厂和配置</span><br>        pool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfluxDBClientPool</span>(factory, poolConfig);<br>        initPool(poolProperty.getMinIdle(), poolProperty.getMaxIdle());<br>        <span class="hljs-keyword">return</span> pool;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 预先加载testObject对象到对象池中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initialSize 初始化连接数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxIdle     最大空闲连接数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPool</span><span class="hljs-params">(<span class="hljs-type">int</span> initialSize, <span class="hljs-type">int</span> maxIdle)</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialSize &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> Math.min(initialSize, maxIdle);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                pool.addObject();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (pool != <span class="hljs-literal">null</span>) &#123;<br>            pool.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、重写InfluxDBConnectionFactory"><a href="#4、重写InfluxDBConnectionFactory" class="headerlink" title="4、重写InfluxDBConnectionFactory"></a>4、重写<code>InfluxDBConnectionFactory</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.influxdb;<br><br><span class="hljs-keyword">import</span> org.influxdb.InfluxDB;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBConnectionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(InfluxDBConnectionFactory.class);<br><br><br>    <span class="hljs-keyword">private</span> InfluxDBProperties properties;<br><br>    <span class="hljs-keyword">private</span> InfluxDBClientPool pool;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBConnectionFactory</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBConnectionFactory</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InfluxDBProperties properties, <span class="hljs-keyword">final</span> InfluxDBClientPool pool)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>        <span class="hljs-built_in">this</span>.pool = pool;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> InfluxDB <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> pool.borrowObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Error while getting connection from pool&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Fail to get InfluxDB connection&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnConnection</span><span class="hljs-params">(InfluxDB connection)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                pool.returnObject(connection);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Error while returning connection to pool&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Fail to return InfluxDB connection&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the configuration properties.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Returns the configuration properties</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> InfluxDBProperties <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> properties;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sets the configuration properties.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> properties The configuration properties to set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InfluxDBProperties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Assert.notNull(getProperties(), <span class="hljs-string">&quot;InfluxDBProperties are required&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、重写InfluxDBTemplate"><a href="#5、重写InfluxDBTemplate" class="headerlink" title="5、重写InfluxDBTemplate"></a>5、重写<code>InfluxDBTemplate</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.influxdb;<br><br><span class="hljs-keyword">import</span> org.influxdb.InfluxDB;<br><span class="hljs-keyword">import</span> org.influxdb.dto.BatchPoints;<br><span class="hljs-keyword">import</span> org.influxdb.dto.Pong;<br><span class="hljs-keyword">import</span> org.influxdb.dto.Query;<br><span class="hljs-keyword">import</span> org.influxdb.dto.QueryResult;<br><span class="hljs-keyword">import</span> org.springframework.data.influxdb.converter.PointCollectionConverter;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBTemplate</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InfluxDBAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfluxDBOperations</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> PointCollectionConverter&lt;T&gt; converter;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBTemplate</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfluxDBTemplate</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InfluxDBConnectionFactory connectionFactory, <span class="hljs-keyword">final</span> PointCollectionConverter&lt;T&gt; converter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setConnectionFactory(connectionFactory);<br>        <span class="hljs-built_in">this</span>.setConverter(converter);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConverter</span><span class="hljs-params">(<span class="hljs-keyword">final</span> PointCollectionConverter&lt;T&gt; converter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.converter = converter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.afterPropertiesSet();<br>        Assert.notNull(converter, <span class="hljs-string">&quot;PointCollectionConverter is required&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDatabase</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">database</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getDatabase();<br>            connection.createDatabase(database);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-keyword">final</span> T... payload)</span> &#123;<br>        write(Arrays.asList(payload));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-keyword">final</span> List&lt;T&gt; payload)</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">database</span> <span class="hljs-operator">=</span> getDatabase();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">retentionPolicy</span> <span class="hljs-operator">=</span> getConnectionFactory().getProperties().getRetentionPolicy();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">BatchPoints</span> <span class="hljs-variable">ops</span> <span class="hljs-operator">=</span> BatchPoints.database(database)<br>                    .retentionPolicy(retentionPolicy)<br>                    .consistency(InfluxDB.ConsistencyLevel.ALL)<br>                    .build();<br>            payload.forEach(t -&gt; Objects.requireNonNull(converter.convert(t)).forEach(ops::point));<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            connection.write(ops);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> QueryResult <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Query query)</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            <span class="hljs-keyword">return</span> connection.query(query);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> QueryResult <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Query query, <span class="hljs-keyword">final</span> TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            <span class="hljs-keyword">return</span> connection.query(query, timeUnit);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(Query query, <span class="hljs-type">int</span> chunkSize, Consumer&lt;QueryResult&gt; consumer)</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            connection.query(query, chunkSize, consumer);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Pong <span class="hljs-title function_">ping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            <span class="hljs-keyword">return</span> connection.ping();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">version</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InfluxDB</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = <span class="hljs-built_in">super</span>.getConnection();<br>            <span class="hljs-keyword">return</span> connection.version();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.returnConnection(connection);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h2><p>改完之后，跑了个测试验证了下，可以发现已经实现了数据库连接的复用了，剩下的就是改bug了，这个季度的OKR有了这不是【手动狗头】</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1862f3855ba46689c673b071f0023d8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2629&h=237&s=309253&e=png&b=1f2223" alt="image.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>兄弟们，如果觉得我写的还不错的话，给我点个赞、关个注吧，谢谢你看到这~</p>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>连接池</tag>
      
      <tag>InfluxDB</tag>
      
      <tag>生产问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SpringMVC拦截器的接口耗时监控方案</title>
    <link href="/2024/02/03/%E5%9F%BA%E4%BA%8ESpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/"/>
    <url>/2024/02/03/%E5%9F%BA%E4%BA%8ESpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="基于SpringMVC拦截器的接口耗时监控方案"><a href="#基于SpringMVC拦截器的接口耗时监控方案" class="headerlink" title="基于SpringMVC拦截器的接口耗时监控方案"></a>基于SpringMVC拦截器的接口耗时监控方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常的项目开发过程中，后端开发人员应该主动去关心自己的接口性能。这种关心需要量化，而量化的直接方式就是对接口的响应时间进行监控，以了解系统性能，帮助判断性能瓶颈。本文基于已有的全链路日志系统进一步补充了接口耗时的方案。已有的全链路日志系统是围绕ELK+Jaeger构建起来的，在Spring Cloud微服务架构中，可以实现跨服务的请求日志追踪 ，帮助我们进行线上问题排查。</p><p>服务告警部分则是通过<a href="https://github.com/AutohomeCorp/frostmourne">Frostmourne</a>平台来实现了，该平台可以接入Elasticsearch，配置相关的项目监控与告警。当监控到接口超时以后，可以通过接口超时日志中的traceId，在Jaeger平台上查看整个请求链路的耗时分布，快速明确问题发生的位置，提升问题发现与响应的速度。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>统计接口的耗时情况属于一个可以复用的功能点，因此这里直接使用 SpringMVC的HandlerInterceptor拦截器来实现，后续抽取成一个公共组件，方便复用。</p><p>拦截器接口 <code>HandlerInterceptor</code> 提供了三个方法来实现对请求前、请求后，响应后进行自定义处理，并且拦截器的前置处理和后置处理是具体关联性的。</p><ul><li><strong>preHandle()</strong> ：在 Controller 方法执行之前执行。即在 <em>HandlerMapping</em> 确定适当的处理程序对象之后调用，但在HandlerAdapter 调用处理程序之前调用。</li><li><strong>postHandle()</strong> ：在 Controller 方法执行之后执行。即在 <em>HandlerAdapter</em> 实际调用处理程序之后，但在DispatcherServlet 呈现视图之前调用。</li><li><strong>afterCompletion()</strong> ：完成请求处理后（即渲染视图之后）的回调。 将在处理程序执行的任何结果上被调用，从而允许适当的资源清理。</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>要统计接口处理请求的时长，可以在拦截器的 <em>preHandle()</em> 方法记录请求开始时间（startTime），在 <em>afterCompletion()</em> 方法中记录请求处理完后的结束时间（endTime），请求处理时间(响应时间) &#x3D; 结束时间 - 开始时间。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol><li>定义一个拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.slf4j.MDC;<br><span class="hljs-keyword">import</span> org.springframework.core.NamedThreadLocal;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截器，统计接口耗时</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeConsumingInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APPLICATION_JSON</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;application/json&quot;</span>;<br>    <span class="hljs-keyword">private</span> NamedThreadLocal&lt;Long&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedThreadLocal</span>&lt;&gt;(<span class="hljs-string">&quot;StopWatch_StartTime&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 记录请求开始时间</span><br>        threadLocal.set(System.currentTimeMillis());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="hljs-meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// no need to override</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="hljs-meta">@Nullable</span> Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 请求结束时间</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 从HttpServletRequest获取开始时间</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> threadLocal.get();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fullUrl</span> <span class="hljs-operator">=</span> getFullUrl(request);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">paremeter</span> <span class="hljs-operator">=</span> getParemeter(request);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> endTime - startTime;<br>            MDC.put(<span class="hljs-string">&quot;costTime&quot;</span>, cost.toString());<br>            MDC.put(<span class="hljs-string">&quot;url&quot;</span>, fullUrl);<br>            <span class="hljs-comment">// 打印请求</span><br>            log.info(<span class="hljs-string">&quot;request parameter: &#123;&#125;&quot;</span>, paremeter);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;fail to calculate time cost&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            threadLocal.remove();<br>            MDC.remove(<span class="hljs-string">&quot;costTime&quot;</span>);<br>            MDC.remove(<span class="hljs-string">&quot;url&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取完整的URL路径</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 完整的URL路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getFullUrl</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>        sb.append(method).append(<span class="hljs-string">&quot; &quot;</span>).append(request.getRequestURL().toString());<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取请求参数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 完整的URL路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getParemeter</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (RequestMethod.POST.name().equals(request.getMethod())<br>                    &amp;&amp; APPLICATION_JSON.equals(request.getContentType())) &#123;<br>                <span class="hljs-type">RequestWrapper</span> <span class="hljs-variable">requestWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestWrapper</span>(request);<br>                <span class="hljs-keyword">return</span> requestWrapper.getBodyString().replaceAll(<span class="hljs-string">&quot;\s+&quot;</span><span class="hljs-string">&quot;, &quot;</span><span class="hljs-string">&quot;&quot;</span>); <br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;fail to get paramter&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置拦截器使其生效</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br>​<br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>​<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeConsumingInterceptor</span>())<br>                <span class="hljs-comment">// 需拦截的URI配置</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 不需拦截的URI配置</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/swagger/**&quot;</span>, <span class="hljs-string">&quot;/static/**&quot;</span>, <span class="hljs-string">&quot;/resource/**&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;***************** ADD TIME CONSUMING INTERCEPTOR  ******************&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>添加logback配置，在开发和测试环境由于流量小，可以通过TCP监听的方式直接将接口的耗时日志传输至logstash，生产环境最好还是通过filebeat监听日志文件的方式去实现。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>log<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logback.logDir&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;LOG_PATH&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logback.appName&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;spring.application.name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logback.elastic&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logback.elastic&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;env&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;spring.profiles.active&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;serverIP&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;spring.cloud.client.ip-address&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;0.0.0.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commonLayoutPattern&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[$&#123;serverIP&#125;] %d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; [%mdc&#123;trace_id:-N/A&#125;] $&#123;LOG_LEVEL_PATTERN:-%p&#125; $&#123;PID:- &#125; --- [%t] %logger&#123;39&#125;.%method[%line] : %m%n&quot;</span>/&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--展示格式 layout --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;commonLayoutPattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logStash&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以访问的logstash日志收集端口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span>192.168.xxx.xxx:4560<span class="hljs-tag">&lt;/<span class="hljs-name">destination</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">providers</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">timestamp</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">timeZone</span>&gt;</span>Asia/Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">timeZone</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">timestamp</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                        &#123;<br>                        &quot;appName&quot;: &quot;$&#123;logback.appName&#125;-$&#123;env&#125;&quot;,<br>                        &quot;serverIP&quot;: &quot;$&#123;serverIP&#125;&quot;,<br>                        &quot;traceId&quot;: &quot;%mdc&#123;trace_id:-N/A&#125;&quot;,<br>                        &quot;costTime&quot;: &quot;%mdc&#123;costTime:-0&#125;&quot;,<br>                        &quot;url&quot;: &quot;%mdc&#123;url:-N/A&#125;&quot;,<br>                        &quot;message&quot;: &quot;%message&quot;,<br>                        &quot;exception&quot;: &quot;%ex&#123;15&#125;&quot;<br>                        &#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">providers</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev,pre&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.xxx.xxx.log.autoconfigure.TimeConsumingInterceptor&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logStash&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileRequestLog&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prod&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.xxx.xxx.log.autoconfigure.TimeConsumingInterceptor&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileRequestLog&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br>​<br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncRequestLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileRequestLog&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>配置开发、测试环境的logstash传输耗时日志</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs schema">input &#123;<br>  tcp &#123;<br>    host =&gt; &quot;192.168.xxx.xxx&quot;<br>    port =&gt; 4560<br>    codec =&gt; json_lines<br>  &#125;<br>&#125;<br>​<br>​<br>filter &#123;<br>  mutate &#123;<br>    convert =&gt; &#123;<br>      &quot;costTime&quot; =&gt; &quot;integer&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>​<br>output &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [&quot;http://192.168.xxx.xxx:9200&quot;]<br>    index =&gt; &quot;request-%&#123;[appName]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>查看耗时结果</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b54f45b1221a4c56a71dbcf597fd4211~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=570&h=469&s=35494&e=png&b=fefefe" alt="企业微信截图_20240206132452.png"></p><ol start="6"><li>配置耗时监控与结果验证</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/774d11ecff5f48ff832cb5feb167d462~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=746&h=903&s=44340&e=png&b=ffffff" alt="image-20240202104718793.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1991ae663d349259393c0636d4d6175~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=443&h=301&s=17285&e=png&b=fbfafa" alt="image-20240202104839798.png"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在调试过程中发现无法获取接口的请求参数，原因在于请求流只能操作一次，会导致后续无法再获取流了。解决的方案是通过过滤器获取参数然后传到后面程序中。</p><ol><li>定义过滤器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;channelFilter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> &#123;<br>        <span class="hljs-comment">// no need to override</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.debug(<span class="hljs-string">&quot;================进入过滤器==================&quot;</span>);<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">RequestWrapper</span> <span class="hljs-variable">requestWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestWrapper</span>(httpServletRequest);<br>        filterChain.doFilter(requestWrapper, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// no need to override</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>添加请求参数处理逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> javax.servlet.ReadListener;<br><span class="hljs-keyword">import</span> javax.servlet.ServletInputStream;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] body;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestWrapper</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-built_in">super</span>(request);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sessionStream</span> <span class="hljs-operator">=</span> getBodyString(request);<br>        body = sessionStream.getBytes(StandardCharsets.UTF_8);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBodyString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body, StandardCharsets.UTF_8);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBodyString</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServletRequest request)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> cloneInputStream(request.getInputStream())) &#123;<br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, StandardCharsets.UTF_8));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            log.error(<span class="hljs-string">&quot;fail to get request body&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    reader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    log.error(<span class="hljs-string">&quot;fail to close stream reader&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;获取body请求参数:&quot;</span> + sb);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">cloneInputStream</span><span class="hljs-params">(ServletInputStream inputStream)</span> &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; -<span class="hljs-number">1</span>) &#123;<br>                byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            byteArrayOutputStream.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            log.error(<span class="hljs-string">&quot;fail to clone input stream&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BufferedReader <span class="hljs-title function_">getReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getInputStream()));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletInputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(body);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletInputStream</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> bais.read();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReady</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadListener</span><span class="hljs-params">(ReadListener readListener)</span> &#123;<br>                <span class="hljs-comment">// no need to override</span><br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-convert">https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-convert</a></p><p><a href="https://github.com/AutohomeCorp/frostmourne">https://github.com/AutohomeCorp/frostmourne</a></p><p><a href="https://blog.csdn.net/ffyyhh995511/article/details/103737514">https://blog.csdn.net/ffyyhh995511/article/details/103737514</a></p><p><a href="https://blog.csdn.net/u013845177/article/details/113658483">https://blog.csdn.net/u013845177/article/details/113658483</a></p><p><a href="https://blog.csdn.net/QIU176161650/article/details/109067360">https://blog.csdn.net/QIU176161650/article/details/109067360</a></p><p><a href="https://segmentfault.com/a/1190000043410117">https://segmentfault.com/a/1190000043410117</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
      <tag>监控</tag>
      
      <tag>ELK</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-80-删除数组中的重复项II</title>
    <link href="/2023/10/28/LeetCode-80-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9II/"/>
    <url>/2023/10/28/LeetCode-80-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9II/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-80-删除数组中的重复项II"><a href="#LeetCode-80-删除数组中的重复项II" class="headerlink" title="LeetCode 80.  删除数组中的重复项II"></a>LeetCode 80.  <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description">删除数组中的重复项II</a></h3><p>给你一个有序数组 <code>nums</code> ，请你 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a></strong> 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>分析：</strong>特殊情况下当数组只有两个元素时，可以不做判断直接返回。原因在于：这两个元素要么是(a, a)，要么是(a, b)。不论是哪种情况都符合题目的要求，所以可以直接返回。当我们引入第三个元素时，需要判断这个元素重复出现的次数是否超过两次。正常的想法是去比较之前出现的两个元素，但是我们可以利用的性质是：首位两个元素必然是符合条件的，因此只要判断第三个元素是否与第一个元素重复。如果重复的话那么该元素出现的次数一定超过两次，否则不会超过两次。以此类推，我们可以依次比较后续的每一位元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span>(nums.length &lt;= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(fast &lt; nums.length)&#123;<br>            <span class="hljs-keyword">if</span>(nums[slow-<span class="hljs-number">1</span>] != nums[fast])&#123;<br>                slow++;<br>                nums[slow] = nums[fast];<br>            &#125;<br>            fast++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
      <tag>快慢指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发场景下的点赞业务实现</title>
    <link href="/2023/04/06/%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E7%82%B9%E8%B5%9E%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/04/06/%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E7%82%B9%E8%B5%9E%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="并发场景下的点赞功能设计与实现"><a href="#并发场景下的点赞功能设计与实现" class="headerlink" title="并发场景下的点赞功能设计与实现"></a>并发场景下的点赞功能设计与实现</h1><p>本文基于redis、lua脚本、策略模式、工厂模式实现了并发场景下的用户点赞、收藏、转发、浏览数据的获取与更新。</p><h2 id="考虑因素"><a href="#考虑因素" class="headerlink" title="考虑因素"></a>考虑因素</h2><p><strong>数据存储</strong>：为了避免频繁地访问数据库，可以使用缓存技术，将点赞量存储在缓存中。每次用户点赞时，首先将点赞量从缓存中读取，然后对其进行修改，最后再将修改后的点赞量写回缓存。</p><p><strong>分布式锁</strong>：在高并发场景下，很容易出现多个用户同时对同一篇文章进行点赞的情况。为了避免出现数据不一致的情况，需要利用redis来保证同一时间只有一个用户能够对同一篇资讯进行点赞操作。</p><p><strong>异步处理</strong>：如果在每次点赞时都需要对数据库进行更新操作，那么对数据库的访问压力将非常大。为了避免这种情况，可以使用异步处理的方式，将点赞信息先存储到消息队列中，然后再由后台异步任务对数据库进行更新操作。</p><p><strong>数据持久化</strong>：以文章点赞业务为例，需要进行持久化的数据包含3个模块：</p><ol><li>用户与文章之间的点赞状态记录</li><li>文章的点赞量</li><li>用户点赞的文章列表</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><p>基于Spring Boot 2.7.15，我们导入以下依赖包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">spring:</span><br>   <span class="hljs-attr">application:</span><br>     <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;shop&#x27;</span><br>   <span class="hljs-attr">redis:</span><br>     <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>     <span class="hljs-attr">port:</span> <span class="hljs-number">6712</span><br>     <span class="hljs-attr">lettuce:</span><br>       <span class="hljs-attr">pool:</span><br>         <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>         <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br> <span class="hljs-attr">server:</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>   <span class="hljs-attr">tomcat:</span><br>     <span class="hljs-attr">threads:</span><br>       <span class="hljs-attr">max:</span> <span class="hljs-number">200</span><br>     <span class="hljs-attr">accept-count:</span> <span class="hljs-number">100</span><br>     <span class="hljs-attr">max-connections:</span> <span class="hljs-number">8192</span>  <br></code></pre></td></tr></table></figure><h3 id="Lua脚本注入"><a href="#Lua脚本注入" class="headerlink" title="Lua脚本注入"></a>Lua脚本注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> com.example.shop.config;<br> ​<br> <span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br> <span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br> <span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br> <span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br> <span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br> ​<br> <span class="hljs-meta">@Configuration</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScriptConfig</span> &#123;<br>     <span class="hljs-meta">@Bean</span><br>     <span class="hljs-keyword">public</span> RedisScript&lt;Void&gt; <span class="hljs-title function_">setUserLike</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-type">Resource</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;script/setUserAction.lua&quot;</span>);<br>         <span class="hljs-keyword">return</span> RedisScript.of(script, Void.class);<br>     &#125;<br> ​<br>     <span class="hljs-meta">@Bean</span><br>     <span class="hljs-keyword">public</span> RedisScript&lt;String&gt; <span class="hljs-title function_">getUserLike</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-type">Resource</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;script/getUserAction.lua&quot;</span>);<br>         <span class="hljs-keyword">return</span> RedisScript.of(script, String.class);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>setUserAction.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"> redis.call(<span class="hljs-string">&#x27;HSET&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">2</span>])<br> <span class="hljs-keyword">local</span> <span class="hljs-built_in">status</span> = <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">2</span>])<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">status</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>     redis.call(<span class="hljs-string">&#x27;INCR&#x27;</span>, KEYS[<span class="hljs-number">2</span>])<br> <span class="hljs-keyword">else</span><br>     redis.call(<span class="hljs-string">&quot;DECR&quot;</span>, KEYS[<span class="hljs-number">2</span>])<br> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>getUserAction.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"> <span class="hljs-keyword">local</span> statusAndCount = &#123;&#125;<br> <span class="hljs-keyword">local</span> likeStatus = <span class="hljs-string">&#x27;info:like:status:&#x27;</span><br> <span class="hljs-keyword">local</span> likeCount = <span class="hljs-string">&#x27;info:like:count:&#x27;</span><br> statusAndCount[<span class="hljs-string">&#x27;likeStatus&#x27;</span>] = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;HGET&#x27;</span>, likeStatus .. KEYS[<span class="hljs-number">1</span>], KEYS[<span class="hljs-number">2</span>]))<br> statusAndCount[<span class="hljs-string">&#x27;likeCount&#x27;</span>] = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>, likeCount .. KEYS[<span class="hljs-number">2</span>]))<br> <span class="hljs-keyword">return</span> cjson.encode(statusAndCount)<br></code></pre></td></tr></table></figure></blockquote><h3 id="基于策略工厂模式生成点赞策略"><a href="#基于策略工厂模式生成点赞策略" class="headerlink" title="基于策略工厂模式生成点赞策略"></a>基于策略工厂模式生成点赞策略</h3><ol><li>定义行为策略接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.strategy.useraction;<br><br><span class="hljs-keyword">import</span> com.cit.lab.action.server.dto.ActionDTO;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.enums.UserActionEnum;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.DuplicateException;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.ParamException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 行为处理策略</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 00:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 00:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActionStrategy</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkStatus</span><span class="hljs-params">(String status, Object cache)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-string">&quot;0&quot;</span>.equals(status)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamException</span>(<span class="hljs-string">&quot;参数异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cache != <span class="hljs-literal">null</span> &amp;&amp; status.equals(String.valueOf(cache))) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DuplicateException</span>(<span class="hljs-string">&quot;重复操作!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkScanStatus</span><span class="hljs-params">(String status, Object cache)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(status)) &#123;<br>            <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamException</span>(<span class="hljs-string">&quot;参数异常&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (status.equals(String.valueOf(cache))) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DuplicateException</span>(<span class="hljs-string">&quot;重复操作!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> ActionDTO <span class="hljs-title function_">buildActionDTO</span><span class="hljs-params">(String userId, String infoId, String status, UserActionEnum actionEnum)</span> &#123;<br>        <span class="hljs-keyword">return</span> ActionDTO.builder()<br>                .id(Math.abs(userId.hashCode()))<br>                .userId(userId)<br>                .infoId(infoId)<br>                .status(status)<br>                .actionEnum(actionEnum)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">(String userId, String infoId, String status)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>创建行为策略生成工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.strategy.useraction;<br><br><span class="hljs-keyword">import</span> com.cit.lab.action.server.enums.ActionStrategyEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 行为策略工厂</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 00:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 00:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActionStrategyFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过Spring容器的方式注入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, ActionStrategy&gt; actionStrategyMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取对应行为策略类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> actionStrategyEnum 行为策略枚举</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ActionStrategy <span class="hljs-title function_">getActionStrategy</span><span class="hljs-params">(ActionStrategyEnum actionStrategyEnum)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (!actionStrategyMap.containsKey(actionStrategyEnum.getBeanName())) &#123;<br>            log.info(<span class="hljs-string">&quot;没有对应的行为策略，无法进行操作&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> actionStrategyMap.get(actionStrategyEnum.getBeanName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现一个点赞策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.strategy.useraction.action;<br><br><br><span class="hljs-keyword">import</span> com.cit.lab.action.server.dto.ActionDTO;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.enums.UserActionEnum;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.strategy.useraction.ActionStrategy;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.cit.lab.action.server.constant.RedisKeyConstant.REDIS_LIKE_COUNT;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.cit.lab.action.server.constant.RedisKeyConstant.REDIS_LIKE_STATUS;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 点赞数据处理策略</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 01:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 01:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component(&quot;likeStrategy&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LikeStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionStrategy</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate kafkaTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisScript&lt;Void&gt; setAction;<br>    <span class="hljs-meta">@Value(value = &quot;$&#123;kafka.action.topic&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String actionTopic;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ObjectMapper objectMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">(String userId, String infoId, String status)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForHash().get(REDIS_LIKE_STATUS + userId, infoId);<br>        checkStatus(status, cache);<br>        stringRedisTemplate.execute(setAction, Arrays.asList(REDIS_LIKE_STATUS + userId, REDIS_LIKE_COUNT + infoId),<br>                infoId, status);<br>        log.info(<span class="hljs-string">&quot;Update like userId &#123;&#125; infoId &#123;&#125;, status &#123;&#125;, count &#123;&#125;!&quot;</span>, userId, infoId, status,<br>                stringRedisTemplate.opsForValue().get(REDIS_LIKE_COUNT + infoId));<br>        <span class="hljs-type">ActionDTO</span> <span class="hljs-variable">actionDTO</span> <span class="hljs-operator">=</span> buildActionDTO(userId, infoId, status, UserActionEnum.LIKE);<br>        <span class="hljs-keyword">try</span> &#123;<br>            kafkaTemplate.send(actionTopic, objectMapper.writeValueAsString(actionDTO));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;fail to send like action with action dto: &#123;&#125;&quot;</span>, actionDTO, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建策略执行上下文</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.strategy.useraction;<br><br><span class="hljs-keyword">import</span> com.cit.lab.action.server.enums.ActionStrategyEnum;<br><span class="hljs-keyword">import</span> lombok.Builder;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 策略执行上下文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 01:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 01:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActionContext</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ActionStrategyFactory actionStrategyFactory;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doStrategy</span><span class="hljs-params">(String userId, String infoId, String status, Integer type)</span> &#123;<br>        <span class="hljs-type">ActionStrategyEnum</span> <span class="hljs-variable">actionStrategyEnum</span> <span class="hljs-operator">=</span> ActionStrategyEnum.getByType(type);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(actionStrategyEnum)) &#123;<br>            log.info(<span class="hljs-string">&quot;cannot find matched action strategy with type &#123;&#125;&quot;</span>, type);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">ActionStrategy</span> <span class="hljs-variable">actionStrategy</span> <span class="hljs-operator">=</span> actionStrategyFactory.getActionStrategy(actionStrategyEnum);<br>        <span class="hljs-keyword">return</span> actionStrategy.doAction(userId, infoId, status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户行为数据处理业务层接口设计与实现"><a href="#用户行为数据处理业务层接口设计与实现" class="headerlink" title="用户行为数据处理业务层接口设计与实现"></a>用户行为数据处理业务层接口设计与实现</h3><ol><li>设计用户行为数据处理接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.service;<br><br><span class="hljs-keyword">import</span> com.cit.lab.action.server.dto.ActionDTO;<br><span class="hljs-keyword">import</span> com.cit.lab.api.action.clientobject.ActionDetailCO;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 用户行为数据处理接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 19:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 19:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserActionService</span> &#123;<br>    ActionDetailCO <span class="hljs-title function_">doAction</span><span class="hljs-params">(String userId, String infoId, String status, Integer type)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理行为数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> actionDTO 行为数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">solveRetry</span><span class="hljs-params">(ActionDTO actionDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核对请求数与处理数</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">checkRes</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实现用户行为数据处理接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.dto.ActionDTO;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.ConcurrentException;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.service.UserActionService;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.strategy.useraction.ActionContext;<br><span class="hljs-keyword">import</span> com.cit.lab.api.action.clientobject.ActionDetailCO;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicLong;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 用户行为数据处理业务处理实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/5 20:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/5 20:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserActionServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserActionService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedisScript&lt;String&gt; getAction;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActionContext context;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">send</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">received</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserActionServiceImpl</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate, RedisScript&lt;String&gt; getAction, ActionContext context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>        <span class="hljs-built_in">this</span>.getAction = getAction;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional(rollbackFor = RuntimeException.class)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ActionDetailCO <span class="hljs-title function_">doAction</span><span class="hljs-params">(String userId, String infoId, String status, Integer type)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> context.doStrategy(userId, infoId, status, type);<br>        <span class="hljs-keyword">if</span> (!success) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentException</span>(<span class="hljs-string">&quot;当前服务正忙，请稍后再试&quot;</span>);<br>        &#125;<br>        send.incrementAndGet();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(getAction, Arrays.asList(userId, infoId));<br>        <span class="hljs-keyword">return</span> JSON.parseObject(result, ActionDetailCO.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solveRetry</span><span class="hljs-params">(ActionDTO actionDTO)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;sava action &#123;&#125;&quot;</span>, JSON.toJSON(actionDTO));<br>        received.incrementAndGet();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">checkRes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;received/send:&quot;</span>.concat(received.toString().concat(<span class="hljs-string">&quot;/&quot;</span>).concat(send.toString()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开放Web-服务-API"><a href="#开放Web-服务-API" class="headerlink" title="开放Web 服务 API"></a>开放Web 服务 API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.lab.action.server.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.cit.basic.dto.Result;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.ConcurrentException;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.DuplicateException;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.exception.ParamException;<br><span class="hljs-keyword">import</span> com.cit.lab.action.server.service.UserActionService;<br><span class="hljs-keyword">import</span> com.cit.lab.api.action.client.UserActionAPI;<br><span class="hljs-keyword">import</span> com.cit.lab.api.action.clientobject.ActionDetailCO;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: UserActionController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/4/3 22:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateUser</span>: Richard</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/4/3 22:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/lab/action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserActionController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserActionAPI</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisScript&lt;String&gt; getUserAction;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserActionService userActionService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>    <span class="hljs-meta">@GetMapping(&quot;/doAction&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doAction</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;infoId&quot;)</span> String infoId,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(name = &quot;userId&quot;)</span> String userId,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(name = &quot;status&quot;)</span> String status,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(name = &quot;type&quot;, defaultValue = &quot;1&quot;)</span> Integer type)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;1&quot;</span>.equals(status) &amp;&amp; !<span class="hljs-string">&quot;0&quot;</span>.equals(status)) &#123;<br>                <span class="hljs-keyword">return</span> Result.ofFail(<span class="hljs-string">&quot;参数异常&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (type != <span class="hljs-number">0</span> &amp;&amp; type != <span class="hljs-number">1</span> &amp;&amp; type != <span class="hljs-number">2</span> &amp;&amp; type != <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span> Result.ofFail(<span class="hljs-string">&quot;参数异常&quot;</span>);<br>            &#125;<br>            infoId = <span class="hljs-string">&quot;1&quot;</span>;<br>            status = <span class="hljs-string">&quot;1&quot;</span>;<br>            userId = Integer.toString(integer.incrementAndGet());<br>            <span class="hljs-type">ActionDetailCO</span> <span class="hljs-variable">actionDetailCO</span> <span class="hljs-operator">=</span> userActionService.doAction(userId, infoId, status, type);<br>            <span class="hljs-keyword">return</span> Result.ofSuccess(actionDetailCO);<br>        &#125; <span class="hljs-keyword">catch</span> (DuplicateException e) &#123;<br>            log.error(<span class="hljs-string">&quot;Duplicate action with userId &#123;&#125;, infoId &#123;&#125;, status &#123;&#125;&quot;</span>, userId, infoId, status, e);<br>            <span class="hljs-keyword">return</span> Result.ofFail(e.getMsg());<br>        &#125; <span class="hljs-keyword">catch</span> (ConcurrentException e) &#123;<br>            log.error(<span class="hljs-string">&quot;Fail to get lock with userId &#123;&#125;, infoId &#123;&#125;, status &#123;&#125;&quot;</span>, userId, infoId, status, e);<br>            <span class="hljs-keyword">return</span> Result.ofFail(e.getMsg());<br>        &#125; <span class="hljs-keyword">catch</span> (ParamException e) &#123;<br>            log.error(<span class="hljs-string">&quot;Fail to do action with wrong params userId &#123;&#125;, infoId &#123;&#125;, status &#123;&#125;&quot;</span>, userId, infoId, status, e);<br>            <span class="hljs-keyword">return</span> Result.ofFail(e.getMsg());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;Fail to do action userId &#123;&#125;, infoId &#123;&#125;, status &#123;&#125;&quot;</span>, userId, infoId, status, e);<br>            <span class="hljs-keyword">return</span> Result.ofFail();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getActionDetail&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getStatus</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;userId&quot;)</span> String userId,</span><br><span class="hljs-params">                            <span class="hljs-meta">@RequestParam(name = &quot;infoId&quot;)</span> String infoId)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(getUserAction, Arrays.asList(userId, infoId));<br>            <span class="hljs-keyword">return</span> Result.ofSuccess(JSON.parseObject(result, ActionDetailCO.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;Fail to get action detail with userId &#123;&#125;, infoId &#123;&#125;!&quot;</span>, userId, infoId);<br>            <span class="hljs-keyword">return</span> Result.ofFail();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/checkRes&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">checkRes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userActionService.checkRes();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>高并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 54 螺旋矩阵</title>
    <link href="/2023/03/24/LeetCode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2023/03/24/LeetCode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="LeetCode-54-螺旋矩阵"><a href="#LeetCode-54-螺旋矩阵" class="headerlink" title="LeetCode 54.  螺旋矩阵"></a>LeetCode 54.  <a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></h4><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：matrix = <span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[4,5,6]</span>,<span class="hljs-comment">[7,8,9]</span>]</span><br>输出：<span class="hljs-comment">[1,2,3,6,9,8,7,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：matrix = [[<span class="hljs-number">1,2,3,4</span>],[<span class="hljs-number">5,6,7,8</span>],[<span class="hljs-number">9,10,11,12</span>]]<br>输出：[<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">8,12,11,10</span>,<span class="hljs-number">9,5,6,7</span>]<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>螺旋矩阵的本质就是在遍历一维数组，只不过每一次切换方向的时候，数组的起止位置在改变，这是需要我们去确定的核心参数。初始条件下： <code>top = 0</code>,<code> botton = matrix.length - 1</code>,<code> left = 0</code>,<code> right = matrix[0].length - 1</code>。第一次水平方向自左向右遍历，区间就是[left, right]；接着就是垂直方向自上而下遍历,区间为[top+1, botton]，再接着就是水平方向自右向左遍历，区间为[left, right-1]；再接着就是垂直方向自下而上遍历，区间为[top+1, botton]，以此类推…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">spiralOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, botton = matrix.length - <span class="hljs-number">1</span>, left = <span class="hljs-number">0</span>, right = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> matrix.length * matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">while</span> (count &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 从左至右</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> left; j &lt;= right &amp;&amp; count &gt;= <span class="hljs-number">1</span>; j++) &#123;<br>                res.add(matrix[left][j]);<br>                count--;<br>            &#125;<br>            top++;<br>            <span class="hljs-comment">// 从上至下</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &lt;= botton &amp;&amp; count &gt;= <span class="hljs-number">1</span>; i++) &#123;<br>                res.add(matrix[i][right]);<br>                count--;<br>            &#125;<br>            right--;<br>            <span class="hljs-comment">// 从右至左</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> right; j &gt;= left &amp;&amp; count &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>                res.add(matrix[botton][j]);<br>                count--;<br>            &#125;<br>            botton--;<br>            <span class="hljs-comment">// 从下至上</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> botton; i &gt;= top &amp;&amp; count &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>                res.add(matrix[i][left]);<br>                count--;<br>            &#125;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅聊注册中心</title>
    <link href="/2023/03/24/%E6%B5%85%E8%81%8A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <url>/2023/03/24/%E6%B5%85%E8%81%8A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="浅聊注册中心"><a href="#浅聊注册中心" class="headerlink" title="浅聊注册中心"></a>浅聊注册中心</h1><h2 id="注册中心诞生的背景"><a href="#注册中心诞生的背景" class="headerlink" title="注册中心诞生的背景"></a>注册中心诞生的背景</h2><p>​        <strong>单体应用架构</strong>中，所有的业务逻辑都紧密地耦合在一个应用中，整个系统相对封闭且复杂，很难进行扩展和重构。此时不同的功能只是项目中的一个模块、一个包、一个类甚至于只是一个方法，功能的调用实际就是对项目内的方法进行调用。</p><p>​        随着企业业务的不断发展，单节点的单体应用无法满足业务需求。于是，企业将单体应用部署多份，分别放在不同的服务器上。然而，不是所有的模块都有比较大的访问量。如果想针对项目中的某些模块进行优化和性能提升，对于单体应用来说，是做不到的。于是，垂直应用架构诞生了。<strong>垂直应用架构</strong>将原来的项目应用拆分为互不相干的几个应用，以此提升系统的整体性能。</p><p>然而业务不会停止，垂直应用不断的增加。在应用数量不断扩张的过程中，一些较为核心和基础的应用不可避免需要被其他应用反复调用，此时为了更好的服务各个业务系统，提升系统的复用性、灵活性，于是将这些较为核心的业务抽离出来，形成统一的服务。在这一过程中，应用系统被抽象为一个个独立的 <strong>服务</strong> ，构建松耦合服务架构，即 <strong>分布式架构</strong>。在分布式架构中，我们会将系统整体拆分为服务层和表现层。服务层封装了具体的业务逻辑供表现层调用，表现层则负责处理与页面的交互操作。</p><p>​       在分布式架构下，当部署的服务越来越多时，重复的代码就会变得越来越多，不利于代码的复用和系统维护。为此，我们需要增加一个统一的调度中心对集群进行实时管理，这就是<strong>SOA(面向服务)架构</strong>。</p><p>​       <strong>SOA架构</strong>也有缺点，例如各服务之间存在依赖关系，如果某个服务出现故障，可能会造成服务器崩溃。<strong>微服务架构</strong>是在SOA架构的基础上进行进一步的扩展和拆分。在微服务架构下，一个大的项目拆分为一个个小的可独立部署的微服务，每个微服务都有自己的数据库。各服务独立打包、独立部署和独立升级；负责的业务比较清晰，利于后期扩展和维护；微服务之间可以采用REST和RPC协议进行通信。</p><p>至此，在架构演进过程中出现了 <strong>服务</strong> 的概念。在微服务架构中，围绕服务诞生了 <strong>服务提供者</strong> 和 <strong>服务消费者</strong> 两种角色，服务消费者通过调用服务提供者提供的服务来完成对应的业务。为了调用服务提供者提供的服务，服务消费者就必须获取服务提供者的调用信息比如调用地址、健康状况等。由于现有系统的复杂性不断提高以及容器部署方式的推行，服务消费者的调用信息无法简单地通过静态配置文件来保存，服务发现的工具—— <strong>注册中心</strong> 由此诞生。</p><h2 id="注册中心的作用"><a href="#注册中心的作用" class="headerlink" title="注册中心的作用"></a>注册中心的作用</h2><ul><li><p><strong>服务注册</strong> ：当服务提供者上线时，服务提供者可以通过注册中心提供的注册接口将所提供的服务的调用地址和元数据等注册到注册中心上，用于服务消费者进行服务调用信息查询；</p></li><li><p><strong>服务注销</strong> ：当服务提供者下线时，服务提供者可以通过注册中心提供的注销接口将所提供的服务的调用地址和元数据等注销；</p></li><li><p><strong>健康状况监测</strong>：</p><ul><li><p>一种是 <strong>服务自主上报方式</strong> ，即服务提供者定时通过注册中心提供的心跳上报接口将心跳上报给注册中心，注册中心通过监测心跳时间来判断该服务提供者是否健康，如果长时间没有收到心跳则认为该服务提供者处于故障状态，变更其服务状态为无服务（或故障中）；</p></li><li><p>另一种是 <strong>注册中心主动探测方式</strong> ，即服务提供者提供健康监测接口用于注册中心定时触发，用以确定当前服务提供是否处于健康状态；</p></li></ul></li></ul><p><strong>从服务消费者的角度来看，注册中心需要提供以下能力：</strong></p><ul><li><strong>获取服务列表</strong> ：服务消费者可以通过注册中心提供的服务查询接口获取对应服务的调用信息；</li><li><strong>服务状态变更事件推送</strong>：当服务提供者的服务集群有新的实例上线，或服务提供者实例下线，亦或者服务提供者处于故障状态不可用时，应当将对应的服务状态信息通知到服务消费者；</li></ul><h2 id="常见注册中心"><a href="#常见注册中心" class="headerlink" title="常见注册中心"></a>常见注册中心</h2><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>​        官方并没有将Zookeeper单纯地定义为一个注册中心，但是国内Dubbo场景下很多都是使用Zookeeper来完成了注册中心的功能。在国内环境下，由于受到Dubbo框架的影响，大部分情况下认为Zookeeper是RPC服务框架下注册中心最好选择，随着Dubbo框架的不断开发优化，和各种注册中心组件的诞生，即使是RPC框架，现在的注册中心也逐步放弃了Zookeeper。但是在常用的开发集群环境中，Zookeeper依然起到十分重要的作用，Java体系中，大部分的集群环境都是依赖Zookeeper管理服务的各个节点。那么Zookeeper是如何实现注册中心的呢？</p><p>​        Zookeeper可以充当一个服务注册表（Service Registry），让多个服务提供者形成一个集群，让服务消费者通过服务注册表获取具体的服务访问地址（IP+端口）去访问具体的服务提供者。每当一个服务提供者部署后都要将自己的服务注册到Zookeeper的某一路径上: &#x2F;{service}&#x2F;{version}&#x2F;{IP:port} 。比如我们的HelloWorldService部署到两台机器，那么Zookeeper上就会创建两条目录：</p><ol><li>&#x2F;HelloWorldService&#x2F;1.0.0&#x2F;100.19.20.01:16888</li><li>&#x2F;HelloWorldService&#x2F;1.0.0&#x2F;100.19.20.02:16888</li></ol><p>这么描述有点不好理解，下图更直观：</p><img src="/2023/03/24/%E6%B5%85%E8%81%8A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/image-20230324000920061.png" class="" title="示意图"><p>在Zookeeper中，进行服务注册，实际上就是在Zookeeper中创建了一个znode节点，该节点存储了该服务的IP、端口、调用方式(协议、序列化方式)等。该节点承担着最重要的职责，它由服务提供者(发布服务时)创建，以供服务消费者获取节点中的信息，从而定位到服务提供者真正网络拓扑位置以及得知如何调用。</p><p><strong>RPC服务注册&#x2F;发现过程简述如下：</strong></p><ol><li>服务提供者启动时，会将其服务名称，IP地址注册到配置中心。</li><li>服务消费者在第一次调用服务时，会通过注册中心找到相应的服务的IP地址列表，并缓存到本地，以供后续使用。当消费者调用服务时，不会再去请求注册中心，而是直接通过负载均衡算法从IP列表中取一个服务提供者的服务器调用服务。</li><li>当服务提供者的某台服务器宕机或下线时，相应的IP会从服务提供者IP列表中移除。同时，注册中心会将新的服务IP地址列表发送给服务消费者机器，缓存在消费者本机。</li><li>当某个服务的所有服务器都下线了，那么这个服务也就下线了。</li><li>同样，当服务提供者的某台服务器上线时，注册中心会将新的服务IP地址列表发送给服务消费者机器，缓存在消费者本机。</li><li>服务提供方可以根据服务消费者的数量来作为服务下线的依据。</li></ol><p>Zookeeper提供了“心跳检测”功能：<strong>它会定时向各个服务提供者发送一个请求（实际上建立的是一个 socket 长连接），如果长期没有响应，服务中心就认为该服务提供者已经“挂了”，并将其剔除。</strong></p><p>比如100.100.0.237这台机器如果宕机了，那么Zookeeper上的路径就会只剩&#x2F;HelloWorldService&#x2F;1.0.0&#x2F;100.100.0.238:16888。</p><p>Zookeeper的Watch机制其实就是一种<strong>推拉结合的模式</strong>：</p><ul><li>服务消费者会去监听相应路径（&#x2F;HelloWorldService&#x2F;1.0.0），一旦路径上的数据有任务变化（增加或减少），<strong>Zookeeper只会发送一个事件类型和节点信息给关注的客户端，而不会包括具体的变更内容</strong>，所以事件本身是轻量级的，这就是推的部分。</li><li><strong>收到变更通知的客户端需要自己去拉变更的数据</strong>，这就是拉的部分。</li></ul><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>​       Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。 Eureka包含两个组件：Eureka Server和Eureka Client。</p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a><strong>Eureka Server</strong></h4><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。<br>　　Eureka Server本身也是一个服务，默认情况下会自动注册到Eureka注册中心。<strong>如果搭建单机版的Eureka Server注册中心，则需要配置取消Eureka Server的自动注册逻辑。</strong>毕竟当前服务注册到当前服务代表的注册中心中是一个说不通的逻辑。<br>　　Eureka Server通过<strong>Register、Get、Renew</strong>等接口提供服务的<strong>注册、发现和心跳检测</strong>等服务。</p><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a><strong>Eureka Client</strong></h4><p>Eureka Client是一个java客户端，用于简化与Eureka Server的交互，<strong>客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后</strong>，将会向Eureka Server发送心跳,<strong>默认周期为30秒</strong>，如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个**服务节点移除(默认90秒)**。Eureka Client分为两个角色，分别是：Application Service(Service Provider)和Application Client(Service Consumer)。</p><ul><li><strong>Application Service</strong></li></ul><p>服务提供方，是注册到Eureka Server中的服务。</p><ul><li><strong>Application Client</strong></li></ul><p>服务消费方，通过Eureka Server发现服务，并消费。</p><blockquote><p>在这里，Application Service和Application Client不是绝对上的定义，因为Provider在提供服务的同时，也可以消费其他Provider提供的服务；Consumer在消费服务的同时，也可以提供对外服务。</p></blockquote><h4 id="Eureka-特点"><a href="#Eureka-特点" class="headerlink" title="Eureka 特点"></a><strong>Eureka 特点</strong></h4><ul><li><strong>可用性（AP原则）</strong>：Eureka 在设计时就紧遵AP原则，Eureka的集群中，只要有一台Eureka还在，就能保证注册服务可用，只不过查到的信息可能不是最新的（不保证强一致性）。</li><li><strong>去中心化架构</strong>：Eureka Server 可以运行多个实例来构建集群，不同于 ZooKeeper 的选举 leader 的过程，Eureka Server 采用的是Peer to Peer 对等通信。这是一种去中心化的架构，无 master&#x2F;slave 之分，每一个 Peer 都是对等的。节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的 serviceUrl 指向其他节点。每个节点都可被视为其他节点的副本。</li><li><strong>请求自动切换</strong>：在集群环境中如果某台 Eureka Server 宕机，Eureka Client 的请求会自动切换到新的 Eureka Server 节点上，当宕机的服务器重新恢复后，Eureka 会再次将其纳入到服务器集群管理之中。</li><li><strong>节点间操作复制</strong>：当节点开始接受客户端请求时，所有的操作都会在节点间进行复制操作，将请求复制到该 Eureka Server 当前所知的其它所有节点中。</li><li><strong>自动注册&amp;心跳</strong>：当一个新的 Eureka Server 节点启动后，会首先尝试从邻近节点获取所有注册列表信息，并完成初始化。Eureka Server 通过 getEurekaServiceUrls() 方法获取所有的节点，并且会通过心跳契约的方式定期更新。</li><li><strong>自动下线</strong>：默认情况下，如果 Eureka Server 在一定时间内没有接收到某个服务实例的心跳（默认周期为30秒），Eureka Server 将会注销该实例（默认为90秒， eureka.instance.lease-expiration-duration-in-seconds 进行自定义配置）。</li><li><strong>保护模式</strong>：当 Eureka Server 节点在短时间内丢失过多的心跳时，那么这个节点就会进入自我保护模式。</li></ul><p>除了上述特点，Eureka还有一种自我保护机制，如果在15分钟内超过 <strong>85%</strong> 的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不再从注册表中移除因为长时间没有收到心跳而过期的服务；</li><li>Eureka仍然能够接受新服务注册和查询请求，但是不会被同步到其它节点上（即保证当前节点依然可用）</li><li>当网络稳定时，当前实例新注册的信息会被同步到其它节点中。</li></ul><h4 id="Eureka工作流程"><a href="#Eureka工作流程" class="headerlink" title="Eureka工作流程"></a>Eureka工作流程</h4><p>了解完 Eureka 核心概念，自我保护机制，以及集群内的工作原理后，我们来整体梳理一下 Eureka 的工作流程：</p><ol><li>Eureka Server 启动成功，等待服务端注册。在启动过程中如果配置了集群，集群之间定时通过 Replicate 同步注册表，每个 Eureka Server 都存在独立完整的服务注册表信息。</li><li>Eureka Client 启动时根据配置的 Eureka Server 地址去注册中心注册服务。</li><li>Eureka Client 会每 30s 向 Eureka Server 发送一次心跳请求，证明客户端服务正常。</li><li>当 Eureka Server 90s 内没有收到 Eureka Client 的心跳，注册中心则认为该节点失效，会注销该实例。</li><li>单位时间内 Eureka Server 统计到有大量的 Eureka Client 没有上送心跳，则认为可能为网络异常，进入自我保护机制，不再剔除没有上送心跳的客户端。</li><li>当 Eureka Client 心跳请求恢复正常之后，Eureka Server 自动退出自我保护模式。</li><li>Eureka Client 定时全量或者增量从注册中心获取服务注册表，并且将获取到的信息缓存到本地。</li><li>服务调用时，Eureka Client 会先从本地缓存找寻调取的服务。如果获取不到，先从注册中心刷新注册表，再同步到本地缓存。</li><li>Eureka Client 获取到目标服务器信息，发起服务调用。</li><li>Eureka Client 程序关闭时向 Eureka Server 发送取消请求，Eureka Server 将实例从注册表中删除。</li></ol><blockquote><p>通过分析 Eureka 工作原理，我可以明显地感觉到 Eureka 的设计之巧妙，完美地解决了注册中心的稳定性和高可用性。</p><p>Eureka 为了保障注册中心的高可用性，容忍了数据的非强一致性，服务节点间的数据可能不一致， Client-Server 间的数据可能不一致。<strong>比较适合跨越多机房、对注册中心服务可用性要求较高的使用场景。</strong></p></blockquote><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>Nacos &#x2F;nɑ:kəʊs&#x2F; 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。是阿里开源的，支持基于 DNS 和基于 RPC 的服务发现的注册中心。它既支持<strong>CP也支持AP</strong>，对其而言只是一个命令的切换，同时还支持各种注册中心迁移到Nacos。<strong>除了服务的注册发现之外，还支持动态配置服务</strong>，一句话概括就是<strong>Nacos &#x3D; Spring Cloud注册中心 + Spring Cloud配置中心</strong>。</p><h4 id="Nacos-的关键特性"><a href="#Nacos-的关键特性" class="headerlink" title="Nacos 的关键特性"></a>Nacos 的关键特性</h4><ul><li><p><strong>服务发现和服务健康监测</strong></p><p>​        Nacos 支持基于 DNS 和基于 RPC 的服务发现。服务提供者使用 <a href="https://nacos.io/zh-cn/docs/sdk.html">原生SDK</a>、<a href="https://nacos.io/zh-cn/docs/open-api.html">OpenAPI</a>、或一个<a href="https://nacos.io/zh-cn/docs/other-language.html">独立的Agent TODO</a>注册 Service 后，服务消费者可以使用<a href="https://nacos.io/zh-cn/docs/xx">DNS TODO</a> 或<a href="https://nacos.io/zh-cn/docs/open-api.html">HTTP&amp;API</a>查找和发现服务。</p><p>​        Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p></li><li><p><strong>动态配置服务</strong></p><p>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的UI (<a href="http://console.nacos.io/nacos/index.html">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p></li><li><p><strong>动态 DNS 服务</strong></p><p>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p><p>Nacos 提供了一些简单的 <a href="https://nacos.io/zh-cn/docs/xx">DNS APIs TODO</a> 帮助您管理服务的关联域名和可用的 IP:PORT 列表.</p></li><li><p><strong>服务及其元数据管理</strong></p><p>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p></li></ul><h4 id="Nacos的Server与Client"><a href="#Nacos的Server与Client" class="headerlink" title="Nacos的Server与Client"></a>Nacos的Server与Client</h4><p>​        Nacos注册中心分为Server与Client，Nacos提供SDK和openApi，如果没有SDK也可以根据openApi手动写服务注册与发现和配置拉取的逻辑。Server采用Java编写，基于Spring Boot框架，为Client提供注册发现服务与配置服务。Client支持包含了目前已知的Nacos多语言客户端及Spring生态的相关客户端。Client与微服务嵌套在一起。Nacos的DNS实现依赖了CoreDNS，其项目为nacos-coredns-plugin。该插件提供了基于CoreDNS的DNS-F客户端，开发语言为go。</p><h4 id="Nacos注册中的交互流程"><a href="#Nacos注册中的交互流程" class="headerlink" title="Nacos注册中的交互流程"></a>Nacos注册中的交互流程</h4><p>作为注册中心的功能来说，Nacos提供的功能与其他主流框架很类似，基本都是围绕服务实例注册、实例健康检查、服务实例获取这三个核心来实现的。</p><img src="/2023/03/24/%E6%B5%85%E8%81%8A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/118bc4dd47460f48be14bb1ee0168295.jpg" class="" title="示意图"><p><strong>Nacos服务注册流程</strong></p><p>以Java版本的Nacos客户端为例，服务注册基本流程：</p><pre><code class="hljs">1. 服务实例启动将自身注册到Nacos注册中心，随后维持与注册中心的心跳;2. 心跳维持策略为每5秒向Nacos Server发送一次心跳，并携带实例信息(服务名、实例IP、端口等);3. Nacos Server也会向Client主动发起健康检查，支持TCP/Http;4. 15秒内无心跳且健康检查失败则认为实例不健康，如果30秒内健康检查失败则剔除实例;5. 服务消费者通过注册中心获取实例，并发起调用;</code></pre><p><strong>其中服务发现支持两种场景：</strong></p><ol><li><p>服务消费者直接向注册中心发送获取某服务实例的请求，注册中心返回所有可用实例，但一般不推荐此种方式；</p></li><li><p>服务消费者向注册中心订阅某服务，并提交一个监听器，当注册中心中服务发生变化时，监听器会收到通知，消费者更新本地服务实例列表，以保证所有的服务均可用。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 105. 从前序与中序遍历序列构造二叉树</title>
    <link href="/2023/03/19/LeetCode-105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/03/19/LeetCode-105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-105-从前序与中序遍历序列构造二叉树"><a href="#LeetCode-105-从前序与中序遍历序列构造二叉树" class="headerlink" title="LeetCode 105.  从前序与中序遍历序列构造二叉树"></a>LeetCode 105.  <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序与中序遍历序列构造二叉树</a></h3><p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p><p><strong>分析：</strong>从先序遍历的特征出发，先序遍历数组的第一个元素一定是二叉树的根结点，再从中序遍历的特征出发，当我们在找到先序遍历的根结点在中序遍历中的位置后，那么位于该位置两侧的则为二叉树根结点的左右子树。重建的过程本质上是一个先序遍历的过程，我们需要自上而下构建二叉树。这个过程是递归进行的，先构建根结点，再构建左子树，再构建右子树。构建左子树的时候需要指定左子树的先序遍历列表与中序遍历列表，同理构建右子树的时候需要指定右子树的先序遍历列表与中序列表，只有这样我们的递归才能跑起来。</p><p>问题的关键在于如何确定每个子树的先序遍历列表与中序遍历列表。初始情况下，没有左子树右子树的概念，完整的先序遍历列表与中序遍历的列表即为我们的参数。</p><p><strong>构建过程：</strong></p><ol><li>如果我们通过下标来标注序列列表的话，那么初始条件下，先序的序列区间：preleft &#x3D; 0；preright &#x3D; preorder.lenght  - 1,中序的的序列区间：inleft &#x3D; 0；inright &#x3D; inorder.length - 1；</li><li>创建根结点，TreeNode(preorder[preleft])；</li><li>找到根结点在中序遍历序列中的位置inroot；</li><li>计算左子树的结点个数leftNum &#x3D; inroot-inleft；</li><li>确定左子树的先序列表左右端点，preleft &#x3D; preleft + 1，preright &#x3D; preleft + leftNum；</li><li>确定左子树的中序列表左右端点，inleft &#x3D; inleft， inright &#x3D; inroot - 1；</li><li>确定右子树的先序列表左右端点，preleft &#x3D; preleft + leftNum + 1，preright &#x3D; preright；</li><li>确定右子树的中序列表左右端点，inleft &#x3D; inroot + 1， inright &#x3D; inright；</li><li>构建左子树</li><li>构建右子树</li><li>终止条件：先序列表的左端点越过右端点。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">// 记录中序列遍历中，每个元素与其对应的下标。如果该元素是一个root结点，则在其两侧为其子树。</span><br>    Map&lt;Integer,Integer&gt; inSite = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;inorder.length; i++)&#123;<br>                inSite.put(inorder[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dfs(preorder,<span class="hljs-number">0</span>,preorder.length-<span class="hljs-number">1</span>,inorder,<span class="hljs-number">0</span>,inorder.length-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    TreeNode <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder,<span class="hljs-type">int</span> preLeft,<span class="hljs-type">int</span> preRight, <span class="hljs-type">int</span>[] inorder,<span class="hljs-type">int</span> inLeft,<span class="hljs-type">int</span> inRight)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preLeft &gt; preRight)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[preLeft]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">inRoot</span> <span class="hljs-operator">=</span> inSite.get(preorder[preLeft]);<br>      <span class="hljs-comment">// 左子树结点数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftNum</span> <span class="hljs-operator">=</span> inRoot - inLeft;<br>        root.left = dfs(preorder, preLeft + <span class="hljs-number">1</span>, preLeft + leftNum, inorder, inLeft, inRoot - <span class="hljs-number">1</span>);<br>        root.right = dfs(preorder, preLeft + leftNum + <span class="hljs-number">1</span>, preRight, inorder, inRoot + <span class="hljs-number">1</span>, inRight);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">同理我们可以从后序与中序遍历序列构建二叉树</a></p><ol><li><strong>构建过程：</strong><ol><li>如果我们通过下标来标注序列列表的话，那么初始条件下，后序的序列区间：postleft &#x3D; 0；postright &#x3D; postorder.lenght  - 1,中序的的序列区间：inleft &#x3D; 0；inright &#x3D; inorder.length - 1；</li><li>创建根结点，TreeNode(postorder[postright])；</li><li>找到根结点在中序遍历序列中的位置inroot；</li><li>计算右子树的结点个数rightNum &#x3D; inright - inroot；</li><li>确定右子树的后序列表左右端点，postleft &#x3D; postright - rightNum，postright &#x3D; postright - 1；</li><li>确定右子树的中序列表左右端点，inleft &#x3D; inroot + 1， inright &#x3D; inright；</li><li>确定左子树的后序列表左右端点，postleft &#x3D; postleft，postright &#x3D; postright - rightNum - 1；</li><li>确定左子树的中序列表左右端点，inleft &#x3D; inleft， inright &#x3D; inroot - 1；</li><li>构建右子树</li><li>构建左子树</li><li>终止条件：先序列表的左端点越过右端点。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Integer, Integer&gt; inSites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inorder.length; i++)&#123;<br>            inSites.put(inorder[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dfs(postorder, <span class="hljs-number">0</span>, postorder.length - <span class="hljs-number">1</span>, inorder, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    TreeNode <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] postorder, <span class="hljs-type">int</span> postLeft, <span class="hljs-type">int</span> postRight, <span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span> inLeft, <span class="hljs-type">int</span> inRight)</span>&#123;<br>        <span class="hljs-keyword">if</span>(postLeft &gt; postRight)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(postorder[postRight]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">inRoot</span> <span class="hljs-operator">=</span> inSites.get(postorder[postRight]);<br>      <span class="hljs-comment">// 右子树结点数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightNum</span> <span class="hljs-operator">=</span> inRight - inRoot;<br>        root.right = dfs(postorder, postRight - rightNum, postRight - <span class="hljs-number">1</span>, inorder, inRoot + <span class="hljs-number">1</span>, inRight);<br>        root.left = dfs(postorder, postLeft, postRight - rightNum - <span class="hljs-number">1</span>, inorder, inLeft, inRoot - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticseach 7.17 快速上手</title>
    <link href="/2023/03/03/Elasticseach-7-17-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2023/03/03/Elasticseach-7-17-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFelasticsearch">Elasticsearch介绍</a></li><li><a href="#elasticsearch%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%94%AF%E6%8C%81%E5%A4%8D%E6%9D%82%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2">Elasticsearch为什么能支持复杂全文检索</a></li><li><a href="#ElasticSearch%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8">在测试环境安装Elasticsearch</a></li><li><a href="#%E5%90%91Elasticsearch%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82">向Elasticsearch发送请求</a></li><li><a href="#Elasticsearch%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86">Elasticsearch数据管理</a></li></ol><h3 id="什么是Elasticsearch"><a href="#什么是Elasticsearch" class="headerlink" title="什么是Elasticsearch"></a>什么是Elasticsearch</h3><ul><li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p>Elasticsearch 将所有的功能打包成一个单独的服务，这样便可以通过程序与它提供的简单的 RESTful API 进行通信， 可以使用自己喜欢的编程语言充当 web 客户端，甚至可以使用命令行（去充当这个客户端）</p><h3 id="Elasticsearch为什么能支持复杂全文检索"><a href="#Elasticsearch为什么能支持复杂全文检索" class="headerlink" title="Elasticsearch为什么能支持复杂全文检索"></a>Elasticsearch为什么能支持复杂全文检索</h3><p>Elasticsearch 是 <em>面向文档</em> 的，意味着它存储整个对象或 <em>文档</em>。Elasticsearch 不仅存储文档，而且 <em>索引</em> 每个文档的内容，使之可以被检索。在 Elasticsearch 中，我们对文档进行索引、检索、排序和过滤—而不是对行列数据。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。Elasticsearch 使用 JSON作为文档的序列化格式。JSON 序列化为大多数编程语言所支持，并且已经成为 NoSQL 领域的标准格式。 它简单、简洁、易于阅读。</p><h3 id="Elasticsearch安装与使用"><a href="#Elasticsearch安装与使用" class="headerlink" title="Elasticsearch安装与使用"></a>Elasticsearch安装与使用</h3><p>这里建议采用docker的方式安装Elasticsearch，非常的方便。</p><ol><li><p>下载elasticsearch镜像，版本号为7.16.2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.16.2<br></code></pre></td></tr></table></figure></li><li><p>创建Elasticsearch实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -e &quot;discovery.type=single-node&quot; -d -p 9200:9200 -p 9300:9300 --name elasticsearch e082d8ac7e5e<br></code></pre></td></tr></table></figure></li><li><p>验证Elasticsearch是否安装成功，访问 <a href="http://localhost:9200/">http://localhost:9200</a> ，返回一个Json，类似如下内容即为成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;26b43d6e6429&quot;</span>,<br>    <span class="hljs-string">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;docker-cluster&quot;</span>,<br>    <span class="hljs-string">&quot;cluster_uuid&quot;</span>: <span class="hljs-string">&quot;RBq5O2_XTfypnCJfFutoRA&quot;</span>,<br>    <span class="hljs-string">&quot;version&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;number&quot;</span>: <span class="hljs-string">&quot;7.16.2&quot;</span>,<br>        <span class="hljs-string">&quot;build_flavor&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>        <span class="hljs-string">&quot;build_type&quot;</span>: <span class="hljs-string">&quot;docker&quot;</span>,<br>        <span class="hljs-string">&quot;build_hash&quot;</span>: <span class="hljs-string">&quot;2b937c44140b6559905130a8650c64dbd0879cfb&quot;</span>,<br>        <span class="hljs-string">&quot;build_date&quot;</span>: <span class="hljs-string">&quot;2021-12-18T19:42:46.604893745Z&quot;</span>,<br>        <span class="hljs-string">&quot;build_snapshot&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-string">&quot;lucene_version&quot;</span>: <span class="hljs-string">&quot;8.10.1&quot;</span>,<br>        <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>        <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;tagline&quot;</span>: <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看Elasticsearch实例ip地址，我这里为172.17.0.3</p><img src="/2023/03/03/Elasticseach-7-17-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/img.png" class="" title="ip查看"></li><li><p>下载kibana镜像，注意版本号匹配。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull kibana:7.16.2 <br></code></pre></td></tr></table></figure></li><li><p>创建kibana实例，这里定义了一个环境变量ELASTICSEARCH_HOSTS对应的值就是elasticsearch实例的ip地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://172.17.0.3:9200 -p 5601:5601 -d kibana:7.16.2<br></code></pre></td></tr></table></figure></li><li><p>验证kibana是否安装成功，访问 <a href="http://localhost:5601/">http://localhost:5601</a> 正常加载页面即为成功。</p></li></ol><h3 id="向Elasticsearch发送请求"><a href="#向Elasticsearch发送请求" class="headerlink" title="向Elasticsearch发送请求"></a>向Elasticsearch发送请求</h3><p>使用REST API可以向Elasticsearch发送数据或者其他请求，这让你能够通过任意的客户端实现与Elasticsearch的交互，例如curl。当然也可以使用Kibana的控制台向Elasticsearch发送请求。</p><h4 id="使用Kibana"><a href="#使用Kibana" class="headerlink" title="使用Kibana"></a>使用Kibana</h4><ol><li><p>点击Kibana主菜单，访问 <strong>Dev Tools &gt; Console</strong>.</p><p><img src="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/images/kibana-console.png" alt="Kibana Console"></p></li><li><p>在console上执行下述样例API请求</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">GET /<br></code></pre></td></tr></table></figure><p>等价于使用curl执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET &quot;localhost:9200/?pretty&quot;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Elasticsearch数据管理"><a href="#Elasticsearch数据管理" class="headerlink" title="Elasticsearch数据管理"></a>Elasticsearch数据管理</h3><p>添加进Elasticsearch中的数据被称为文档，Elasticsearch将这些文档存储在可搜索的索引当中。对于时序类数据，例如日志和度量指标，通常可以将这些文档添加到一个由多个自动生成的后台索引组成的数据流当中。数据流需要与其名称匹配的索引模板。Elasticsearch 使用这个模板来配置数据流的后台索引。发送到数据流的文档必须存在一个<code>@timestamp</code>的字段。</p><h4 id="添加一个文档"><a href="#添加一个文档" class="headerlink" title="添加一个文档"></a>添加一个文档</h4><p>提交下列索引请求，将一条日志信息添加进<code>logs-my_app-default</code>数据流，如果该数据流不存在，那么该请求会使用<code>logs-*-*</code> 索引模板自动创建一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">POST</span> logs-my_app-<span class="hljs-keyword">default</span>/_doc<br>&#123;<br>  <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;2099-05-06T16:21:15.000Z&quot;</span>,<br>  <span class="hljs-string">&quot;event&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;original&quot;</span>: <span class="hljs-string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;GET /images/bg.jpg HTTP/1.0\&quot; 200 24736&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求的响应的结果包含了Elasticsearch为这片文档自动生成的元数据:</p><ul><li>这个后台索引<code>_index</code> 包含了该文档，而Elasticsearch自动生成了后台索引的名称。</li><li>该索引为为文档生成了一个唯一<code>id</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,<br>  <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;gl5MJXMBMk1dGnErnBW8&quot;</span>,<br>  <span class="hljs-string">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>  <span class="hljs-string">&quot;_shards&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="添加多条文档"><a href="#添加多条文档" class="headerlink" title="添加多条文档"></a>添加多条文档</h4><p>使用<code>_bulk</code>端点可以在一个请求中添加多条文档。批量数据必须是用换行符分割Json数据。每一个新的行都必须以<code>\n</code>结尾，包含最后一行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">PUT</span> logs-my_app-<span class="hljs-keyword">default</span>/_bulk<br>&#123; <span class="hljs-string">&quot;create&quot;</span>: &#123; &#125; &#125;<br>&#123; <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;2099-05-07T16:24:32.000Z&quot;</span>, <span class="hljs-string">&quot;event&quot;</span>: &#123; <span class="hljs-string">&quot;original&quot;</span>: <span class="hljs-string">&quot;192.0.2.242 - - [07/May/2020:16:24:32 -0500] \&quot;GET /images/hm_nbg.jpg HTTP/1.0\&quot; 304 0&quot;</span> &#125; &#125;<br>&#123; <span class="hljs-string">&quot;create&quot;</span>: &#123; &#125; &#125;<br>&#123; <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;2099-05-08T16:25:42.000Z&quot;</span>, <span class="hljs-string">&quot;event&quot;</span>: &#123; <span class="hljs-string">&quot;original&quot;</span>: <span class="hljs-string">&quot;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \&quot;GET /favicon.ico HTTP/1.0\&quot; 200 3638&quot;</span> &#125; &#125;<br></code></pre></td></tr></table></figure><h4 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h4><p>被索引的文档在搜索时几乎是实时响应。下列搜索匹配的实体在<code>logs-my_app-default</code>中并且按照<code>@timestamp</code>降序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123; &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>默认的，响应的命中部分包括最多与搜索匹配的前10个文档。每次命中的 _ source 包含索引期间提交的原始 JSON 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;took&quot;</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-string">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;_shards&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;hits&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;total&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">3</span>,<br>      <span class="hljs-string">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;hits&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,<br>        <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;PdjWongB9KPnaVm2IyaL&quot;</span>,<br>        <span class="hljs-string">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;_source&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;2099-05-08T16:25:42.000Z&quot;</span>,<br>          <span class="hljs-string">&quot;event&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;original&quot;</span>: <span class="hljs-string">&quot;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \&quot;GET /favicon.ico HTTP/1.0\&quot; 200 3638&quot;</span><br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;sort&quot;</span>: [<br>          <span class="hljs-number">4081940742000</span><br>        ]<br>      &#125;,<br>      ...<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取具体字段"><a href="#获取具体字段" class="headerlink" title="获取具体字段"></a>获取具体字段</h4><p>对于大型文档来说，解析 完整的<code>_source</code>非常麻烦。若要从响应中排除它，请将<code> _source</code> 参数设置为 <code>false</code>。相反，请使用 <code>fields </code>参数检索所需的字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123; &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  ...<br>  <span class="hljs-string">&quot;hits&quot;</span>: &#123;<br>    ...<br>    <span class="hljs-string">&quot;hits&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,<br>        <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;PdjWongB9KPnaVm2IyaL&quot;</span>,<br>        <span class="hljs-string">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;@timestamp&quot;</span>: [<br>            <span class="hljs-string">&quot;2099-05-08T16:25:42.000Z&quot;</span><br>          ]<br>        &#125;,<br>        <span class="hljs-string">&quot;sort&quot;</span>: [<br>          <span class="hljs-number">4081940742000</span><br>        ]<br>      &#125;,<br>      ...<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="搜索一个日期范围"><a href="#搜索一个日期范围" class="headerlink" title="搜索一个日期范围"></a>搜索一个日期范围</h4><p>若要跨特定时间或 IP 范围进行搜索，请使用范围查询。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;2099-05-05&quot;</span>,<br>        <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;2099-05-08&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用日期数学来定义相对时间范围。以下查询搜索过去一天的数据，这些数据与日志<code>logs-my_app-default</code>中的任何日志条目都不匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;now-1d/d&quot;</span>,<br>        <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;now/d&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="从非结构化内容中提取字段编辑"><a href="#从非结构化内容中提取字段编辑" class="headerlink" title="从非结构化内容中提取字段编辑"></a>从非结构化内容中提取字段编辑</h4><p>可以在搜索期间从非结构化内容(如日志消息)中提取运行时字段。使用以下搜索可以从<code>event.original</code>中提取 <code>source.ip </code>运行时字段。要将其包含在响应中，请将 <code>source.ip</code> 添加到 <code>fields </code>参数中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;runtime_mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.ip&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ip&quot;</span>,<br>      <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        String sourceip=grok(&#x27;%&#123;IPORHOST:sourceip&#125; .*&#x27;).extract(doc[ &quot;</span>event.<span class="hljs-property">original</span><span class="hljs-string">&quot; ].value)?.sourceip;</span><br><span class="hljs-string">        if (sourceip != null) emit(sourceip);</span><br><span class="hljs-string">      &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;2099-05-05&quot;</span>,<br>        <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;2099-05-08&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span>,<br>    <span class="hljs-string">&quot;source.ip&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><p>可以使用 <code>bool </code>查询来组合多个查询。下面的搜索结合了两个范围查询: 一个在<code>@timestamp</code>上，一个在 <code>source.ip</code> 字段上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;runtime_mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.ip&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ip&quot;</span>,<br>      <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        String sourceip=grok(&#x27;%&#123;IPORHOST:sourceip&#125; .*&#x27;).extract(doc[ &quot;</span>event.<span class="hljs-property">original</span><span class="hljs-string">&quot; ].value)?.sourceip;</span><br><span class="hljs-string">        if (sourceip != null) emit(sourceip);</span><br><span class="hljs-string">      &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;2099-05-05&quot;</span>,<br>              <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;2099-05-08&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;source.ip&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;192.0.2.0&quot;</span>,<br>              <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-string">&quot;192.0.2.240&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span>,<br>    <span class="hljs-string">&quot;source.ip&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="聚合数据"><a href="#聚合数据" class="headerlink" title="聚合数据"></a>聚合数据</h4><p>可以使用 bool 查询来组合多个查询。下面的搜索使用一个聚合来计算<code> average_response_size</code>，该聚合使用<code>http.response.body.bytes</code>运行时字段。聚合仅在与<code>query</code>匹配的文档上运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> logs-my_app-<span class="hljs-keyword">default</span>/_search<br>&#123;<br>  <span class="hljs-string">&quot;runtime_mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;http.response.body.bytes&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span>,<br>      <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        String bytes=grok(&#x27;%&#123;COMMONAPACHELOG&#125;&#x27;).extract(doc[ &quot;</span>event.<span class="hljs-property">original</span><span class="hljs-string">&quot; ].value)?.bytes;</span><br><span class="hljs-string">        if (bytes != null) emit(Integer.parseInt(bytes));</span><br><span class="hljs-string">      &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;average_response_size&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;http.response.body.bytes&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;2099-05-05&quot;</span>,<br>              <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;2099-05-08&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;fields&quot;</span>: [<br>    <span class="hljs-string">&quot;@timestamp&quot;</span>,<br>    <span class="hljs-string">&quot;http.response.body.bytes&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;@timestamp&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>响应的<code>aggregations</code>对象包含聚合结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  ...<br>  <span class="hljs-string">&quot;aggregations&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;average_response_size&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-number">12368.0</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h4><p>完成后,删除测试数据流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DELETE</span> _data_stream/logs-my_app-<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Spring AOP 实现token权限校验</title>
    <link href="/2023/03/01/%E5%9F%BA%E4%BA%8ESpring-AOP-%E5%AE%9E%E7%8E%B0token%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/03/01/%E5%9F%BA%E4%BA%8ESpring-AOP-%E5%AE%9E%E7%8E%B0token%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Spring-AOP-实现token权限校验"><a href="#基于Spring-AOP-实现token权限校验" class="headerlink" title="基于Spring AOP 实现token权限校验"></a>基于Spring AOP 实现token权限校验</h1><h2 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h2><p>我们首先定一个注解用于后用在controller接口进行标注，设置切面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.sentineldemo.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: ahcit</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Token校验注解</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/2/28 19:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/2/28 19:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TokenCheck &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h2><p>我们在使用了@TokenCheck的方法上建立切点，生成切面。@Around注解可以用来在调用一个具体方法前和调用后来完成一些具体的任务。比如我们想在执行controller中方法前打印出请求参数，并在方法执行结束后来打印出响应值，这个时候，我们就可以借助于@Around注解来实现。由于我们在校验token的过程中，如果校验不通过要及时返回验证失败的结果，验证通过的话要继续执行后续的方法，所以@Around是最适合的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.sentineldemo.aspect;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.ObjectUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: ahcit</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: token校验切面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateDate</span>: 2023/2/28 19:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateDate</span>: 2023/2/28 19:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@UpdateRemark</span>: 更新说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenCheckAspect</span> &#123;<br>  <br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(com.cit.sentineldemo.annotation.TokenCheck)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tokenAspect</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(value = &quot;tokenAspect()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">before</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) requestAttributes.resolveReference(RequestAttributes.REFERENCE_REQUEST);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> servletRequest.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(data)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我失败了&quot;</span>;<br>            &#125;<br>            <span class="hljs-comment">//业务逻辑通过token查询验证</span><br>            <span class="hljs-comment">// check token</span><br>            <span class="hljs-comment">// token校验通过执行原方法逻辑并返回结果</span><br>            <span class="hljs-keyword">return</span> proceedingJoinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            log.info(<span class="hljs-string">&quot;exception&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证切面"><a href="#验证切面" class="headerlink" title="验证切面"></a>验证切面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cit.sentineldemo.controller;<br><br><span class="hljs-keyword">import</span> com.cit.sentineldemo.annotation.TokenCheck;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@TokenCheck</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/hi/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">showName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java注解简述</title>
    <link href="/2023/02/27/Java%E6%B3%A8%E8%A7%A3%E7%AE%80%E8%BF%B0/"/>
    <url>/2023/02/27/Java%E6%B3%A8%E8%A7%A3%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="注解简述"><a href="#注解简述" class="headerlink" title="注解简述"></a>注解简述</h1><h3 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h3><p>用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。</p><ul><li>生成文档，通过代码里标识的元数据生成javadoc文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，编译时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><ul><li><strong>Java自带的标准注解</strong>，包含@Override、@Deprecated和@SuppressWarning等，用这些注解标明后编译器就会进行检查。</li><li><strong>元注解</strong>，元注解是用于定义注解的注解。</li><li><strong>自定义注解</strong>，根据自己的需求定义注解，并可用注解对自定义注解进行注解。</li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解指的是对注解类型进行注解的注解类，目前有以下6个，@Target，@Retent，@Documented，@Inherited，@Repetable和Native。</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><blockquote><p>描述注解的使用范围。</p></blockquote><p>该注解用来说明它所注解的注解类可修饰的对象范围，如：packages、types、类成员、方法参数和本地变量，取值范围见ElementType枚举类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ElementType</span> &#123;<br> <br>    TYPE, <span class="hljs-comment">// 类、接口、枚举类</span><br> <br>    FIELD, <span class="hljs-comment">// 成员变量（包括：枚举常量）</span><br> <br>    METHOD, <span class="hljs-comment">// 成员方法</span><br> <br>    PARAMETER, <span class="hljs-comment">// 方法参数</span><br> <br>    CONSTRUCTOR, <span class="hljs-comment">// 构造方法</span><br> <br>    LOCAL_VARIABLE, <span class="hljs-comment">// 局部变量</span><br> <br>    ANNOTATION_TYPE, <span class="hljs-comment">// 注解类</span><br> <br>    PACKAGE, <span class="hljs-comment">// 可用于修饰：包</span><br> <br>    TYPE_PARAMETER, <span class="hljs-comment">// 类型参数，JDK 1.8 新增</span><br> <br>    TYPE_USE <span class="hljs-comment">// 使用类型的任何地方，JDK 1.8 新增</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Retention-amp-RetentionTarget"><a href="#Retention-amp-RetentionTarget" class="headerlink" title="@Retention &amp; RetentionTarget"></a>@Retention &amp; RetentionTarget</h4><blockquote><p>描述注解保留的时间范围。</p></blockquote><p>限定了被它所注解的注解类在注解到其他类之后可以保留到哪个阶段。一共有三种策略，见RetentionPolicy枚举类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RetentionPolicy</span> &#123;<br> <br>    SOURCE,    <span class="hljs-comment">// 源文件保留</span><br>    CLASS,     <span class="hljs-comment">// 编译期保留，默认值 编译后用RuntimeInvisibleAnnotations记录</span><br>    RUNTIME    <span class="hljs-comment">// 运行期保留，可通过反射去获取注解信息。编译后用RuntimeVisibleAnnotations记录</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里给出三个样例，区别不同阶段的注解在编译后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SourcePolicy &#123;<br> <br>&#125;<br><span class="hljs-meta">@Retention(RetentionPolicy.CLASS)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ClassPolicy &#123;<br> <br>&#125;<br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RuntimePolicy &#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>用定义好的三个注解类分别去注解一个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RetentionTest</span> &#123;<br> <br><span class="hljs-meta">@SourcePolicy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sourcePolicy</span><span class="hljs-params">()</span> &#123;<br>&#125;<br> <br><span class="hljs-meta">@ClassPolicy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">classPolicy</span><span class="hljs-params">()</span> &#123;<br>&#125;<br> <br><span class="hljs-meta">@RuntimePolicy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runtimePolicy</span><span class="hljs-params">()</span> &#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过执行 <code>javap -verbose RetentionTest</code>命令获取到的RetentionTest 的 class 字节码内容如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-keyword">public</span> retention.RetentionTest();<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span>  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">3</span>: <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sourcePolicy</span><span class="hljs-params">()</span>;<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">0</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">7</span>: <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">classPolicy</span><span class="hljs-params">()</span>;<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">0</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">11</span>: <span class="hljs-number">0</span><br>    RuntimeInvisibleAnnotations:<br>      <span class="hljs-number">0</span>: #<span class="hljs-number">11</span>()<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runtimePolicy</span><span class="hljs-params">()</span>;<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">0</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">15</span>: <span class="hljs-number">0</span><br>    RuntimeVisibleAnnotations:<br>      <span class="hljs-number">0</span>: #<span class="hljs-number">14</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>从 RetentionTest 的字节码内容我们可以得出以下两点结论：</p><ul><li>编译器并没有记录下 sourcePolicy() 方法的注解信息；</li><li>编译器分别使用了 <code>RuntimeInvisibleAnnotations</code> 和 <code>RuntimeVisibleAnnotations</code> 属性去记录了<code>classPolicy()</code>方法 和 <code>runtimePolicy()</code>方法 的注解信息；</li></ul><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><blockquote><p>描述在使用javadoc工具为类生成帮助文档时是否要保留其注解信息。</p></blockquote><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><blockquote><p>被它修饰的注解将具备继承性。如果某个类使用被@Inherited修改的Annotation，则其子类将自动具有该注解。</p></blockquote><ul><li>定义<code>@Inherited</code>注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TestInheritedAnnotation &#123;<br>    String [] values();<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">number</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用这个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TestInheritedAnnotation(values = &#123;&quot;value&quot;&#125;, number = 10)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 获取Class对象上的注解</span><br>        Annotation[] annotations = clazz.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">xxxxxxx.TestInheritedAnnotation(values=[value], number=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>即使Student类没有显示地被注解<code>@TestInheritedAnnotation</code>，但是它的父类Person被注解，而且<code>@TestInheritedAnnotation</code>被<code>@Inherited</code>注解，因此Student类自动有了该注解。</p><h4 id="Repetable"><a href="#Repetable" class="headerlink" title="@Repetable"></a>@Repetable</h4><blockquote><p>许在同一声明类型（类，属性，或方法）上多次使用同一个注解。</p></blockquote><p>Java8以前的版本使用注解有一个限制是相同的注解在同一位置只能使用一次，不能使用多次。Java 8 引入了重复注解机制，这样相同的注解可以在同一地方使用多次。重复注解机制本身必须用 @Repeatable 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repeatable(Authorities.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Authority &#123;<br>     String <span class="hljs-title function_">role</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Authorities &#123;<br>    Authority[] value();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepeatAnnotationUseNewVersion</span> &#123;<br>    <span class="hljs-meta">@Authority(role=&quot;Admin&quot;)</span><br>    <span class="hljs-meta">@Authority(role=&quot;Manager&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomeThing</span><span class="hljs-params">()</span>&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Native"><a href="#Native" class="headerlink" title="@Native"></a>@Native</h4><blockquote><p>表示这个变量可以被本地代码引用，常常被代码生成工具使用。</p></blockquote><h3 id="注解与反射接口"><a href="#注解与反射接口" class="headerlink" title="注解与反射接口"></a>注解与反射接口</h3><blockquote><p>定义注解后，可以通过反射包java.lang.reflect下的AnnotatedElement接口提供的方法获取。这里仅限于注解的阶段为RUNTIME时，才会在运行时可见。当class文件被装载时，保存在class文件中的Annotation才会被虚拟机读取。</p></blockquote><p>AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的方法来访问Annotation信息。我们看下具体的先关接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnnotatedElement</span> &#123;<br>  <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。注意：此方法会忽略注解对应的注解容器。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnnotationPresent</span><span class="hljs-params">(Class&lt;? extends Annotation&gt; annotationClass)</span>`<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。</span><br><span class="hljs-comment">     */</span><br>    &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; T <span class="hljs-title function_">getAnnotation</span><span class="hljs-params">(Class&lt;T&gt; annotationClass)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回该程序元素上存在的所有注解，若没有注解，返回长度为0的数组。</span><br><span class="hljs-comment">     */</span><br>    Annotation[] getAnnotations();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回该程序元素上存在的、指定类型的注解数组。没有注解对应类型的注解时，返回长度为0的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。`getAnnotationsByType`方法与 `getAnnotation`的区别在于，`getAnnotationsByType`会检测注解对应的重复注解容器。若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。</span><br><span class="hljs-comment">     */</span><br>    &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释。如果没有注释直接存在于此元素上，则返回null</span><br><span class="hljs-comment">     */</span><br>    &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; T <span class="hljs-title function_">getDeclaredAnnotation</span><span class="hljs-params">(Class&lt;T&gt; annotationClass)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释</span><br><span class="hljs-comment">     */</span><br>    &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回直接存在于此元素上的所有注解及注解对应的重复注解容器。与此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注释直接存在于此元素上，则返回长度为零的一个数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</span><br><span class="hljs-comment">     */</span><br>    Annotation[] getDeclaredAnnotations();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ol><li><p>创建一个自定义的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Detail &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">title</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DetailAnnotationTest</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Detail(title = &quot;toStringMethod&quot;, description = &quot;override toString method&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Override toString method&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-meta">@Detail(title = &quot;old static method&quot;, description = &quot;deprecated old static method&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">oldMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;old method, don&#x27;t use it.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</span><br>    <span class="hljs-meta">@Detail(title = &quot;test method&quot;, description = &quot;suppress warning static method&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">genericsTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        l.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>        oldMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用反射接口获取注解信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Method[] methods = DetailAnnotationTest.class.getClassLoader()<br>                .loadClass((<span class="hljs-string">&quot;com.cit.sentineldemo.practice.DetailAnnotationTest&quot;</span>)).getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            <span class="hljs-keyword">if</span> (method.isAnnotationPresent(Detail.class)) &#123;<br>                <span class="hljs-keyword">for</span> (Annotation annotation : method.getDeclaredAnnotations()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Method: &quot;</span> + method + <span class="hljs-string">&quot;, Annotation: &quot;</span> + annotation);<br>                &#125;<br>                <span class="hljs-type">Detail</span> <span class="hljs-variable">detail</span> <span class="hljs-operator">=</span> method.getAnnotation(Detail.class);<br>                System.out.println(<span class="hljs-string">&quot;title: &quot;</span> + detail.title()<br>                        + <span class="hljs-string">&quot;, description: &quot;</span> + detail.description());<br>                System.out.println();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出注解信息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Method: <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> com.cit.sentineldemo.practice.DetailAnnotationTest.oldMethod(), Annotation: <span class="hljs-meta">@java</span>.lang.Deprecated()<br>Method: <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> com.cit.sentineldemo.practice.DetailAnnotationTest.oldMethod(), Annotation: <span class="hljs-meta">@com</span>.cit.sentineldemo.annotation.Detail(title=old <span class="hljs-keyword">static</span> method, description=deprecated old <span class="hljs-keyword">static</span> method)<br>title: old <span class="hljs-keyword">static</span> method, description: deprecated old <span class="hljs-keyword">static</span> method<br><br>Method: <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> com.cit.sentineldemo.practice.DetailAnnotationTest.genericsTest() <span class="hljs-keyword">throws</span> java.io.FileNotFoundException, Annotation: <span class="hljs-meta">@com</span>.cit.sentineldemo.annotation.Detail(title=test method, description=suppress warning <span class="hljs-keyword">static</span> method)<br>title: test method, description: suppress warning <span class="hljs-keyword">static</span> method<br><br>Method: <span class="hljs-keyword">public</span> java.lang.String com.cit.sentineldemo.practice.DetailAnnotationTest.toString(), Annotation: <span class="hljs-meta">@com</span>.cit.sentineldemo.annotation.Detail(title=toStringMethod, description=override toString method)<br>title: toStringMethod, description: override toString method<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 5. 最长回文子串</title>
    <link href="/2023/02/27/LeetCode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2023/02/27/LeetCode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-5-最长回文子串"><a href="#LeetCode-5-最长回文子串" class="headerlink" title="LeetCode 5.  最长回文子串"></a>LeetCode 5.  <a href="https://leetcode.cn/problems/longest-palindromic-substring/description/">最长回文子串</a></h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-comment">// 以i为中心向外扩张</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> palindrome(s, i, i);<br>            <span class="hljs-comment">// 以i，i+1为中心向外扩张</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> palindrome(s, i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 比较s1与目前最长回文子串的长度并更新</span><br>            <span class="hljs-keyword">if</span> (s1.length() &gt; res.length()) &#123;<br>                res = s1;<br>            &#125;<br>            <span class="hljs-comment">// 比较s2与目前最长回文子串的长度并更新</span><br>            <span class="hljs-keyword">if</span> (s2.length() &gt; res.length()) &#123;<br>                res = s2;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以l为左边界，r为右边界向向两端扩散，寻找回文串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s 给定字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> l 左边界下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r 右边界下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 回文串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">palindrome</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.length() &amp;&amp; s.charAt(l) == s.charAt(r)) &#123;<br>            l--;<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.substring(l + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 25. K个一组翻转链表</title>
    <link href="/2023/02/26/LeetCode-25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/26/LeetCode-25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-25-K个一组翻转链表"><a href="#LeetCode-25-K个一组翻转链表" class="headerlink" title="LeetCode 25.  K个一组翻转链表"></a>LeetCode 25.  <a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/description/">K个一组翻转链表</a></h3><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。<code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>分析：</strong>本题可以采用问题拆解的方式去解决，首先解决k个节点的链表反转问题，再将每组反转的链表串联起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            q = q.next;<br>        &#125;<br>      <span class="hljs-comment">// 得到该组反转的结果，并记录头结点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> reverseAB(head, q);<br>      <span class="hljs-comment">// 反转前的head在反转后变为最后一个结点，让其指向下一组的头结点</span><br>        head.next = reverseKGroup(q, k);<br>      <span class="hljs-comment">// 返回反转后的链表的头结点</span><br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转单链表</span><br><span class="hljs-comment">     * a-&gt;a1-&gt;a2-&gt;a3-&gt;a4-&gt;a5-&gt;null</span><br><span class="hljs-comment">     * a&lt;-a1&lt;-a2&lt;-a3&lt;-a4&lt;-a5-&gt;null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head 链表头</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 反转后的单链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, cur, nxt;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 记录当前结点的的下一个结点</span><br>            nxt = cur.next;<br>            <span class="hljs-comment">// 调转当前结点的指针方向</span><br>            cur.next = pre;<br>            <span class="hljs-comment">// 更新pre，向右移动一步，即指向cur</span><br>            pre = cur;<br>            <span class="hljs-comment">// 更新cur，另一个链表的头结点</span><br>            cur = nxt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转单链表[a,b),一般化</span><br><span class="hljs-comment">     * a-&gt;a1-&gt;a2-&gt;a3-&gt;a4-&gt;a5-&gt;b</span><br><span class="hljs-comment">     * a&lt;-a1&lt;-a2&lt;-a3&lt;-a4&lt;-a5-&gt;b</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a 链表起始点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b 链表结束点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 反转后的链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseAB</span><span class="hljs-params">(ListNode a, ListNode b)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, cur = a, nxt;<br>        <span class="hljs-keyword">while</span> (cur != b) &#123;<br>            <span class="hljs-comment">// 记录右侧链表表头的下一个结点，用于更新下一轮循环的表头</span><br>            nxt = cur.next;<br>            <span class="hljs-comment">// 将右侧链表表头的后继改为pre，完成反转</span><br>            cur.next = pre;<br>            <span class="hljs-comment">// 更新左侧链表的表头pre，向右移一位，指向cur</span><br>            pre = cur;<br>            <span class="hljs-comment">// 更新右侧链表表头</span><br>            cur = nxt;<br>        &#125;<br>        <span class="hljs-comment">// 返回的是pre，左侧链表头</span><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 206.反转链表</title>
    <link href="/2023/02/23/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/23/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-206-反转链表"><a href="#LeetCode-206-反转链表" class="headerlink" title="LeetCode 206.  反转链表"></a>LeetCode 206.  <a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>分析：</strong>本题用迭代法比较简单不做赘述，主要考虑如何用递归的方法实现。需要考虑的点有3个。</p><ol><li><strong>递归函数的设计：</strong>凡是用到递归的地方，首先要做的就是明确递归函数本身在完成一件什么样的事情。我这里的递归函数需要完成的事情就是给定一个单链表返回它反转后的结果。换句话说，只要是调用了了该函数，它返回的单链表一定被反转了。</li><li><strong>base case的分析：</strong>当单链表为空或者只有一个结点时显然直接返回即可。</li><li><strong>递归内部的反转逻辑：</strong>核心语句只有一句<code>head.next.next=head</code>。这句拆成两步来解读就很好理解了，假设<code>p = head.next</code>，则<code>head.next.next=head</code>就可以拆成<code>p=head.next</code>; <code>p.next=head</code>，这里就完成了反转的操作。但是不要忘记将<code>head.next</code>清空，不然head后面还连着<code>p</code>结点。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">return</span> reverse(head);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> reverse(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 19. 删除链表的倒数第 N 个结点</title>
    <link href="/2023/02/20/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <url>/2023/02/20/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-19-删除链表的倒数第-N-个结点"><a href="#LeetCode-19-删除链表的倒数第-N-个结点" class="headerlink" title="LeetCode 19.  删除链表的倒数第 N 个结点"></a>LeetCode 19.  <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第 N 个结点</a></h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        dummy.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummy, q = dummy; <br>        <span class="hljs-comment">// 找到第倒数n+1个结点，并让该结点的next指向next的next结点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n+<span class="hljs-number">1</span>; i++)&#123;<br>            q = q.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(q != <span class="hljs-literal">null</span>)&#123;<br>            q = q.next;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-comment">// p为倒数第n+1个结点</span><br>        p.next = p.next.next;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 23. 合并K个升序链表</title>
    <link href="/2023/02/20/LeetCode-23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/20/LeetCode-23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-23-合并K个升序链表"><a href="#LeetCode-23-合并K个升序链表" class="headerlink" title="LeetCode 23.  合并K个升序链表"></a>LeetCode 23.  <a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">合并K个升序链表</a></h3><p>给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> &#123;<br>        <span class="hljs-comment">// 边界值考虑</span><br>        <span class="hljs-keyword">if</span>(lists.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 虚拟头结点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummy;<br>        PriorityQueue&lt;ListNode&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(lists.length,(a, b)-&gt;(a.val - b.val));<br>        <span class="hljs-comment">// 建堆</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; lists.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == lists[i])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            pq.offer(lists[i]);<br>        &#125;<br>        <span class="hljs-comment">// 更新堆</span><br>        <span class="hljs-keyword">while</span>(!pq.isEmpty())&#123;<br>            <span class="hljs-comment">// 取出堆顶元素</span><br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pq.poll();<br>            <span class="hljs-comment">// 添加到p.next</span><br>            p.next = cur;<br>            <span class="hljs-comment">// 更新p</span><br>            p = p.next;<br>            <span class="hljs-comment">// 调整堆</span><br>            <span class="hljs-keyword">if</span>(cur.next != <span class="hljs-literal">null</span>)&#123;<br>                cur = cur.next;<br>                pq.offer(cur);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 86. 分割链表</title>
    <link href="/2023/02/20/LeetCode-86-%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/20/LeetCode-86-%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-86-分隔链表"><a href="#LeetCode-86-分隔链表" class="headerlink" title="LeetCode 86.  分隔链表"></a>LeetCode 86.  <a href="https://leetcode.cn/problems/partition-list/description/?orderBy=hot">分隔链表</a></h3><p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p><p>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p><p><strong>分析：</strong>本题的关键点有两个</p><ol><li><p>使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前</p><p>这句话读起来很绕口，但是本质上表达的意义就是在遍历单链表的过程把小于x的结点放到左边，把大于或等于x的结点放到右边</p></li><li><p>有了1的说明，编码实现已经是手到擒来的事情了，但在实现的过程中需要考虑将遍历到的结点置为孤结点。</p><p><strong>解释：</strong>假设以p结点作为遍历结点，当我们确定p属于左边还是右边以后，需要切断了p的后续结点，使之成为一个孤结点。如果不使p为成为一个孤节点，则相当于将以p为首的单链表加到了p1或者p2后面，这不是我们想要的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">partition</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">2</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> dummy1;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> dummy2;<br>        <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(p.val &lt; x)&#123;<br>                p1.next = p;<br>                p1 = p1.next;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p.val &gt;= x)&#123;<br>                p2.next = p;<br>                p2 = p2.next;<br>            &#125;<br>            <span class="hljs-comment">// 保存以p.next为首的链表</span><br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> p.next;<br>            <span class="hljs-comment">// 切断p的后续结点，使p成为了一个孤节点</span><br>            p.next = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 更新p的位置</span><br>            p = temp;<br>        &#125;<br>        p1.next = dummy2.next;<br>        <span class="hljs-keyword">return</span> dummy1.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 21. 合并两个有序链表</title>
    <link href="/2023/02/19/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/19/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-21-合并两个有序链表"><a href="#LeetCode-21-合并两个有序链表" class="headerlink" title="LeetCode 21. 合并两个有序链表"></a>LeetCode 21. <a href="https://leetcode.cn/problems/merge-two-sorted-lists/description/">合并两个有序链表</a></h3><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummy, p1 = list1, p2 = list2;<br>        <span class="hljs-comment">// 循环条件 p1 != null 或  p2 != null</span><br>        <span class="hljs-keyword">while</span>(p1 != <span class="hljs-literal">null</span> ||  p2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (p1 == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">// p1遍历结束，接上p2，跳出循环</span><br>                p.next = p2;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p2 == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">// p2遍历结束，接上p1，跳出循环</span><br>                p.next = p1;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p1.val &lt;= p2.val)&#123;<br>                <span class="hljs-comment">// p1对应的值更小，接上p1</span><br>                p.next = p1;<br>                p1 = p1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// p2对应的值更小，接上p1</span><br>                p.next = p2;<br>                p2 = p2.next;<br>            &#125;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引页分裂详解</title>
    <link href="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据页分裂详解"><a href="#MySQL数据页分裂详解" class="headerlink" title="MySQL数据页分裂详解"></a>MySQL数据页分裂详解</h1><p>在介绍聚簇索引时提到，当插入行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行。那么页分裂的过程到底是怎样的呢？首先需要阐明的一点是，InnoDB从磁盘中读取数据的最小单位时数据页，我们需要的数据记录就包含在数据页当中。</p><h2 id="数据页的逻辑结构"><a href="#数据页的逻辑结构" class="headerlink" title="数据页的逻辑结构"></a>数据页的逻辑结构</h2><p>关于数据页的逻辑结构可以通过下图来进行描述</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/data_page_description.png" class="" title="数据页逻辑结构图"><p>从图中可以看到一个数据页由七个部分组成，每个部分的意义见下表。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>大小</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>File Header</td><td>38字节</td><td>所有页的通用文件头信息</td></tr><tr><td>Page Header</td><td>56字节</td><td>索引页特有的页头信息</td></tr><tr><td>Infimum(下界)+Supremum(上界)</td><td>26字节</td><td>页中虚拟的最小、最大记录，上界大于当前存在的最大主键值，下界小于当前最小主键值</td></tr><tr><td>User Records</td><td>变长</td><td>用户记录数据</td></tr><tr><td>Free Space</td><td>变长</td><td>空闲空间</td></tr><tr><td>Page Directory</td><td>变长</td><td>页目录，加速页内数据检索效率</td></tr><tr><td>File Trailer</td><td>8字节</td><td>所有页的通用文件尾信息，校验页是否完整</td></tr></tbody></table><h3 id="File-Header"><a href="#File-Header" class="headerlink" title="File Header"></a>File Header</h3><p>File Header是所有页都有的一个通用的结构，占用固定的38字节，它记录了页的一些通用的状态信息，例如：页的页号、Checksum、把页串联成双向链表的指针、页的类型等等。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>大小</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>FIL_PAGE_SPACE_OR_CHECKSUM</td><td>4字节</td><td>新版本中代表页的校验和Checksum</td></tr><tr><td>FIL_PAGE_OFFSET</td><td>4字节</td><td>页号</td></tr><tr><td>FIL_PAGE_PREV</td><td>4字节</td><td>上一个页的页号</td></tr><tr><td>FIL_PAGE_NEXT</td><td>4字节</td><td>下一个页的页号</td></tr><tr><td>FIL_PAGE_LSN</td><td>8字节</td><td>页面最后被修改时的LSN值</td></tr><tr><td>FIL_PAGE_TYPE</td><td>2字节</td><td>页的类型</td></tr><tr><td>FIL_PAGE_FILE_FLUSH_LSN</td><td>8字节</td><td>仅在系统表空间的第1个页中使用，代表文件至少被刷新到了对应的LSN值</td></tr><tr><td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td><td>4字节</td><td>页数据哪个表空间</td></tr></tbody></table><ul><li><strong>FIL_PAGE_SPACE_OR_CHECKSUM</strong></li></ul><p>基于当前页计算出的校验和(Checksum)，可以把它看作是哈希值，校验和不同，则两个页数据肯定不同。它的作用是InnoDB在脏页刷盘时，有可能会遇到页刷到一半断电的情况，页的头和尾部分分别记录校验和，只有当头尾的校验和一致的时候，才代表磁盘上的页是完整的，否则就是一个损坏的页。</p><ul><li><strong>FIL_PAGE_OFFSET</strong></li></ul><p>页号，页的唯一标识，全局递增的数字，InnoDB通过页号来定位唯一的一个页。4字节存储，意味着一个表空间最多可以有232个页，按照一个页16KB计算，则一个表空间最多支持64TB的数据。</p><ul><li><strong>FIL_PAGE_PREV &amp; FIL_PAGE_NEXT</strong></li></ul><p>一个页大小才16KB，一张表数据其实是由N多个页构成的，页与页之间在物理上可以是不连续的，但是逻辑上要连续，FIL_PAGE_PREV和FIL_PAGE_NEXT分别指向当前页的上一个页和下一个页的页号，通过这两个指针将索引页串联成了一个双向链表。记录与记录之间是单向的，页与页之间是双向的！</p><ul><li><strong>FIL_PAGE_LSN</strong></li></ul><p>页面最后被修改时，对应的LSN值。LSN的全称是Log Sequence Number，日志序列号。它是一个递增的数字，和事务相关，这里不作赘述。</p><ul><li><strong>FIL_PAGE_TYPE</strong></li></ul><p>当前页的类型，InnoDB为了不同的目的设计了很多不同类型的页，索引页的固定值是<code>0x45BF</code>。</p><ul><li><strong>FIL_PAGE_FILE_FLUSH_LSN</strong></li></ul><p>仅在第1个页中使用，用来判断数据库是正常关闭还是异常宕机。</p><ul><li><strong>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</strong></li></ul><p>仅记录当前页数据哪个表空间。</p><h3 id="Page-Header"><a href="#Page-Header" class="headerlink" title="Page Header"></a>Page Header</h3><p>Page Header是索引页特有的结构，占用固定的56字节，它记录了索引页中记录相关的状态信息。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>大小</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>PAGE_N_DlR_SLOTS</td><td>2字节</td><td>页目录中的槽数量</td></tr><tr><td>PAGE_HEAP_TOP</td><td>2字节</td><td>未使用的空间最小地址，User Records和Free Space分界点</td></tr><tr><td>PAGE_N_HEAP</td><td>2字节</td><td>本页中的记录的数量(包括虚拟记录和删除记录)</td></tr><tr><td>PAGE_FREE</td><td>2字节</td><td>第一个删除的记录地址，后续删除的记录会形成链表。</td></tr><tr><td>PAGE_GARBAGE</td><td>2字节</td><td>已删除记录占用的字节数</td></tr><tr><td>PAGE_LAST_INSERT</td><td>2字节</td><td>最后插入记录的位置</td></tr><tr><td>PAGE_DIRECTION</td><td>2字节</td><td>记录插入的方向</td></tr><tr><td>PAGE_N_DIRECTION</td><td>2字节</td><td>同一个方向连续插入的记录数量</td></tr><tr><td>PAGE_N_RECS</td><td>2字节</td><td>该页中记录的数量(不包括虚拟记录和删除记录)</td></tr><tr><td>PAGE_MAX_TRX_ID</td><td>8字节</td><td>修改当前页的最大事务ID，仅在二级索引中使用</td></tr><tr><td>PAGE_LEVEL</td><td>2字节</td><td>当前页在B+树中所处的层级</td></tr><tr><td>PAGE_INDEX_ID</td><td>8字节</td><td>索引ID，表示当前页属于哪个索引</td></tr><tr><td>PAGE_BTR_SEG_LEAF</td><td>10字节</td><td>B+树叶子段的头部信息，仅在B+树的Root页定义</td></tr><tr><td>PAGE_BTR_SEG_TOP</td><td>10字节</td><td>B+树非叶子段的头部信息，仅在B+树的Root页定义</td></tr></tbody></table><p>不用每个属性都了解，我们挑几个比较重要的看看。</p><ul><li><strong>PAGE_N_DlR_SLOTS</strong></li></ul><p>一个页内可能有上千条记录，挨个遍历的话效率太慢了。为了提高页内记录的检索效率，InnoDB将页内的记录划分为多个组，组里最大的那条记录相较于页的地址偏移量会记录到「Page Directory」部分，每个组都对应一个槽，槽的大小是固定的2字节。该属性记录的就是页内槽的数量。</p><ul><li><strong>PAGE_HEAP_TOP</strong></li></ul><p>Free Space的起始位置，它是User Records和Free Space分界点。一个全新的页一开始是没有User Records部分的，每插入一条记录，都要向Free Space申请空间，Free Space耗尽就代表页满了。</p><ul><li><strong>PAGE_FREE</strong></li></ul><p>DELETE命令删除记录时，InnoDB并不会真的将记录从磁盘中删除，而是在记录的头信息里打个标记，然后将其加入到「垃圾链表」中。PAGE_FREE指向的就是垃圾链表的表头记录。后面删除的记录，也会自动加入到链表里。</p><ul><li><strong>PAGE_DIRECTION &amp; PAGE_N_DIRECTION</strong></li></ul><p>PAGE_DIRECTION表示最后一条记录插入的方向，比上一条记录值大则记为右边，反之则是左边。PAGE_N_DIRECTION表示同一方向连续插入的记录数，方向变了该值就会重置。</p><ul><li><strong>PAGE_LEVEL</strong></li></ul><p>InnoDB组织数据的形式就是B+树，树中的节点就是索引页，PAGE_LEVEL代表当前页在B+树中所处的层级。InnoDB规定，叶子节点层级为0，然后向上递增。</p><h3 id="User-Records"><a href="#User-Records" class="headerlink" title="User Records"></a>User Records</h3><blockquote><p>Infimum和Supremum也属于记录，只是为了与用户记录区分开才划分成了两部分，我们先看User Records。</p></blockquote><p>用户记录存放在User Records部分，一个全新的页一开始全是Free Space，是没有User Records部分的。每插入一条记录都需要到Free Space申请一块空间，并将其划分到User Records用来存放用户记录。当Free Space耗尽也就代表当前页已经用完了，再有新记录需要插入，就需要申请一个新的页了。</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/index_pages.png" class="" title="索引页列表"><p>还记得MySQL的行格式吗？它决定了记录在磁盘里的存储格式。以COMPACT为例，存储格式如下图：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/record_store_struct.png" class="" title="行记录存储结构"><p>记录头信息里的字段比较关键，以防大家忘记，我这里再贴一下：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>大小(Bit)</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>预留位1</td><td>1</td><td>没有使用</td></tr><tr><td>预留位2</td><td>1</td><td>没有使用</td></tr><tr><td>deleted_flag</td><td>1</td><td>记录删除标记</td></tr><tr><td>min_rec_flag</td><td>1</td><td>B+树非叶子节点的最小目录项标记</td></tr><tr><td>n_owned</td><td>4</td><td>同一页内同一组里最大的记录会记录组里的记录数量，其余记录该值为0</td></tr><tr><td>heap_no</td><td>13</td><td>当前记录在页面堆里的相对位置</td></tr><tr><td>record_type</td><td>3</td><td>记录类型。0:普通记录,1:B+树非叶子节点目录项记录,2:Infimum记录,3:Supremum记录.</td></tr><tr><td>next_record</td><td>16</td><td>下一条记录的相对位置</td></tr></tbody></table><p>记录头信息的最后2字节用来连接下一条记录，将页内所有记录串联成一个单向链表。所以我们隐藏变长字段长度列表和NULL值列表，记录的格式应该是这样的：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/record_list.png" class="" title="行记录列表"><p><strong>记录是怎么排序的？</strong> 我们已经知道，页内的记录会自动串联成一个单向链表。那这个链表的编排顺序是什么呢？是按照记录的插入时间排序的吗？其实不是的，如果表有主键，会根据主键排序；没主键有唯一非空索引，会根据该索引排序；两者都没有，InnoDB会自动生成一个<code>row_id</code>列并根据该列进行排序。</p><h3 id="Infimum-amp-Supremum"><a href="#Infimum-amp-Supremum" class="headerlink" title="Infimum &amp; Supremum"></a>Infimum &amp; Supremum</h3><p>Infimum和Supremum是索引页内的两条虚拟记录，InnoDB规定所有索引页都会有这两条记录，而且所有的用户记录都比Infimum大，都比Supremum小。 记录头信息里的heap_no代表记录在堆里的相对位置，该值越小代表记录越靠前。细心的同学会发现，上图中的用户记录heap_no值是从2开始的，那0和1呢？不说你也肯定猜到了，就是被Infimum和Supremum占用了。Infimum和Supremum的heap_no值分别是0和1，它俩在所有用户记录的最前面。</p><p>Infimum和Supremum结构非常的简单，和用户记录一样也有头信息，真实数据部分是固定的字符串，如下图所示：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/infimum_supermum.png" class="" title="上下界位置"><p>我们把这两条虚拟记录也加入到记录里面，完整的结构就是下面这样的：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/compact_infimum_supermum.png" class="" title="带上下界行记录结构"><p>Supremum记录的next_record属性为0，代表它已经没有下一条记录了。</p><h3 id="Page-Directory"><a href="#Page-Directory" class="headerlink" title="Page Directory"></a>Page Directory</h3><p>Page Directory也叫作「页目录」，它的目的是提高页内记录的检索效率。相较于一张表几千万的记录来说，一个页内几百上千条记录已经是很少很少了。可即便如此，它也有几百上千条啊，如果页内检索记录只能挨个遍历的话，那也太低效了。别忘了，页内的记录是根据索引值排好序的，我们可以巧用「二分法」来快速查找。</p><p>具体做法是：将页内所有非删除的记录划分为N个组，每个组里最后一条记录(即主键最大的记录)称作“大哥”，其余记录是“小弟”，“大哥”的<code>n_owned</code>属性记录了组内的记录数量。将“大哥”在页内的地址偏移量提取出来，按顺序依次从File Trailer部分往前写，每个地址偏移量占用2字节，称作一个「槽」，Page Directory就是由这些槽构成的。 InnoDB对于分组内的记录数量有一些规定：</p><ul><li>Infimum记录所在分组，只能有一条记录。</li><li>Supremum记录所在分组，允许有1~8条记录。</li><li>其余分组，允许有4~8条记录。</li></ul><p>由此可见，一个组里最多有8条记录，只要通过二分法快速定位到组，InnoDB也只需要遍历这8条记录，相较于遍历页内所有记录，效率要高的多。</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/page_directory.png" class="" title="页目录内的记录定位"><h3 id="File-Trailer"><a href="#File-Trailer" class="headerlink" title="File Trailer"></a>File Trailer</h3><p>File Trailer是所有页都有的通用结构，占用固定的8字节，它的主要作用就是为了校验页的完整性。磁盘的速度实在是太慢了，InnoDB不会每次写点数据都直接刷新到磁盘上，那样MySQL会慢死。而是将页作为刷盘的基本单位，数据修改时，先改内存里的页，稍后再将整个页的数据一次性刷新到磁盘里。但是这会带来一个问题，一个页16KB，刷到第10KB的时候磁盘断电了怎么办？重启后InnoDB如何判断磁盘里的页数据是完整的？</p><p>InnoDB是这么处理的，刷盘前根据页数据计算出一个Checksum，在页头和页尾都写一份。页刷盘的时候，先刷页头再刷页尾，当头尾两个Checksum值一致的时候，代表磁盘里的页是完整的，否则就表示页头刷了页尾没刷，那肯定是刷到一半出错了。</p><table><thead><tr><th><strong>大小</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>4字节</td><td>页的校验和Checksum</td></tr><tr><td>4字节</td><td>页最后被修改时对应的LSN的后4个字节，正常情况下应该与File Header里的FIL_PAGE_LSN的后4个字节相同。</td></tr></tbody></table><h2 id="分裂过程"><a href="#分裂过程" class="headerlink" title="分裂过程"></a>分裂过程</h2><p>假定目前每页可以存储m(偶数)条记录，现内存中存在以下数据页，每页均已填充满，并在此时插入记录m，如下图所示：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/full_pages.png" class="" title="数据页分裂前"><p>由于Page0中记录已满，在插入记录m时必然会导致页分裂，页分裂的过程可以概况为以下几个步骤：</p><ol><li>创建一个新页。</li><li>确定原始页可以在哪里拆分（在记录级别）</li><li>移动记录</li><li>重新定义页之间关系</li></ol><p>重新定义后的页关系如下图所示：</p><img src="/2023/01/18/MySQL%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%88%86%E8%A3%82%E8%AF%A6%E8%A7%A3/full_pages_split.png" class="" title="数据页分裂后"><p>可以看到的是Page0保留了50%的数据记录，这个值是由<code>MERGE_THRESHOLD</code>参数控制的，默认为50%（可以使用<code>CREATE TABLE</code>语句的<code>table_option COMMENT</code>子句为表设置MERGE_THRESHOLD值）。因此在执行页分裂时，可以看到这里分裂后的页仍保留了一半的数据记录，并且数据页之间的前后关系也发生了对应的改变。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>MySQL索引页结构：<a href="https://juejin.cn/post/7068917155604987941">https://juejin.cn/post/7068917155604987941</a></li><li>Innodb页合并和页分裂：<a href="https://cloud.tencent.com/developer/article/1656122">https://cloud.tencent.com/developer/article/1656122</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引总结</title>
    <link href="/2023/01/15/MySQL%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/01/15/MySQL%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL索引总结"><a href="#MySQL索引总结" class="headerlink" title="MySQL索引总结"></a>MySQL索引总结</h1><h2 id="索引介绍"><a href="#索引介绍" class="headerlink" title="索引介绍"></a>索引介绍</h2><ul><li>定义：一种用于快速查询和检索数据的数据结构，可以看成一种排序好的数据结构。</li><li>底层数据结构：常见的有B树、B+树和Hash、红黑树。在MySQL中，MyISAM和InnoDB都使用了B+树作为底层的数据结构。</li></ul><h2 id="索引的优缺点："><a href="#索引的优缺点：" class="headerlink" title="索引的优缺点："></a>索引的优缺点：</h2><p>一般情况下，基于索引的查询比全表扫描要快，但是在数据量不大的时候，这种速度上的优势并不明显。</p><p><strong>优点:</strong></p><ul><li>使用索引可以加快查询速度。</li><li>唯一索引可以保证行记录的唯一性 。</li></ul><p><strong>缺点：</strong></p><ul><li>创建以及维护索引需要耗费很多时间。在对数据进行增删改的过程中如果关联到了索引列，则对应的索引也要进行对应的修改，此时会影响索引的执行效率。</li><li>索引文件需要使用物理文件存储，会耗费一定的空间。</li></ul><h2 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h2><h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据。在处理hash冲突问题时，通常用的是链地址法。</p><h3 id="B树与B-树"><a href="#B树与B-树" class="headerlink" title="B树与B+树"></a>B树与B+树</h3><p>B树又称B-树，全称为多路平衡查找树，而B+树是B树的一种变体，两者的区别在于以下三点：</p><ul><li><p>B树的所有节点既存放key也存放data。但B+树只有叶子节点存放key和data，其他内节点只存放key，<strong>因为这样一个节点就可以存储更多的key，可以使得B+树相对B树来说更矮（IO次数就是树的高度），所以与磁盘交换的IO操作次数更少。</strong></p></li><li><p>B树的叶子节点都是独立的，但B+树叶子节点有一条引用链是指向相邻的叶子节点，便于进行范围查询。</p></li><li><p>B树在检索的过程中相当于对范围内每个节点关键字做二分查找，存在未到达叶子节点就已经结束查询的情况。相对的，B+树的查询效率则更加稳定，原因在于任何查询都是从根节点开始，到叶子节点结束。</p></li></ul><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><h3 id="主键索引-Primary-Key"><a href="#主键索引-Primary-Key" class="headerlink" title="主键索引(Primary Key)"></a>主键索引(Primary Key)</h3><p>数据表的主键列使用的就是主键索引。MySQL基于InnoDB存储引擎的表中，在未显式的指定表的主键时，InnoDB 首先会检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。</p><h3 id="二级索引-辅助索引"><a href="#二级索引-辅助索引" class="headerlink" title="二级索引(辅助索引)"></a>二级索引(辅助索引)</h3><p><strong>二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。简而言之，它是指向主键索引的索引</strong></p><p>常见的唯一索引、普通索引、前缀索引均属于二级索引。</p><ul><li><strong>唯一索引：</strong>唯一索引的约束意义大于索引意义，它所关联的列不允许出现重复的数据，但是可以为null。建立该索引的目的大部分时候是为了保证该属性列的唯一性，而不是为了查询效率。</li><li><strong>普通索引：</strong>普通索引的唯一作用就是加速查询。它允许数据重复与null。</li><li><strong>前缀索引：</strong>仅适用于字符串类型，仅对文本的前几个字符创建索引。</li><li><strong>全文索引：</strong>针对大文本内的关键词检索场景。MyISAM与Mysql 5.6之后的版本均支持。</li></ul><h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><h3 id="聚簇索引（聚集索引）"><a href="#聚簇索引（聚集索引）" class="headerlink" title="聚簇索引（聚集索引）"></a>聚簇索引（聚集索引）</h3><p><strong>聚簇索引即是指索引信息与数据信息存放在一起的索引，InnoDB中的主键索引就是典型的聚簇索引。</strong></p><p><strong>聚簇索引的优缺点：</strong></p><p><strong>优点：</strong></p><ul><li>基于聚簇索引的查询速度非常快，原因在于B+树是一颗多路平衡二叉树，而且其叶子节点也都是有序的。在定位到索引节点后，能从节点中读取到相应的数据。相较于非聚簇索引，它减少了一次IO操作。</li><li>对排序查找与范围查找优化：基于主键的聚簇索引的排序查找和范围查找速度非常快。</li><li>使用覆盖索引扫描的查询可以直接使用页结点中的主键值。</li></ul><p><strong>缺点：</strong></p><ul><li>聚簇索引最大限度地提高了I&#x2F;O密集型应用的性能，但如果数据全部都放在<strong>内存</strong>中，则访问的顺序就没那么重要了，聚簇索引也就没什么优势了。</li><li>插入速度严重依赖于插入顺序。如果按照主键顺序插入数据，那么速度是最快的，且形成一个紧凑的索引结构，如果不是，那么在加载完成后最好使用OPTIMIZE TABLE重新组织一下表。由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，那么可能会涉及到其他位置的数据位置进行频繁调整，降低效率。<strong>因此InnoDB一定建议使用自增逻辑主键。</strong></li><li>当插入行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次“<strong>页分裂</strong>”操作，页分裂会导致表占用更多的磁盘空间，并且使索引结构变得不紧凑（原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约50%），形成很多磁盘碎片，可能导致全表扫描变慢。</li><li><strong>更新、删除聚簇索引列的代价同样很高</strong>，因为会强制InnoDB将每个被更新的行移动到新的位置，并涉及到其他行的位置移动，同样可能造成页分裂、磁盘碎片化、页合并等问题。</li><li>聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候。</li><li><strong>二级索引访问需要两次索引查找</strong>，而不是一次。因为二级索引叶子节点保存的不是指向行的物理位置的指针，而是行的主键值。二级索引查找行，存储引擎需要找到二级索引的叶子节点获得对应的主键值，然后根据这个值去聚簇索引中查找到对应的行，两次B-Tree查找。</li></ul><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p><strong>非聚簇索引即索引结构和数据分开存放的索引，二级索引就是典型的非聚簇索引。</strong>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的主键，根据主键再回表查询数据。</p><p><strong>非聚簇索引的优缺点：</strong></p><p><strong>优点：</strong></p><p>更新索引的代价比聚簇索引小，因为非聚簇索引的叶子节点是不存放数据的。</p><p><strong>缺点：</strong></p><ul><li>依赖于有序的数据</li><li>可能会二次查询（回表）。当查到索引对应的指针或主键后，可能还需要根据指针或者主键再到数据文件或者表中查询。<strong>这里的”可能”体现在，当索引字段就是需要返回的字段的时候是不用回表的，此时又可以称之为覆盖索引。</strong></li></ul><h2 id="覆盖索引与联合索引"><a href="#覆盖索引与联合索引" class="headerlink" title="覆盖索引与联合索引"></a>覆盖索引与联合索引</h2><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a><strong>覆盖索引</strong></h3><p>如果一个索引包含（覆盖）了所有需要查询的字段的值，则将其称之为覆盖索引。覆盖索引的好处是可以减少一次回表操作，因为索引key已经涵盖了要查询的数据。</p><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>使用表中的多个字段创建索引，就是联合索引，也叫组合索引或者复合索引。</p><h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>最左前缀匹配原则是指，当查询使用到联合索引时，会从左到右以此去匹配索引字段。如果查询条件中存在于联合索引中最左侧字段相匹配的字段，则会通过该字段过滤掉一部分数据，直至联合索引中的全部字段匹配完成，或者在执行过程中遇到了范围查询也会停止匹配。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>索引下推是MySQL5.6版本中提供的一项索引优化功能。</p><p><strong>使用下推索引与不使用的区别：</strong></p><ul><li><p>在不使用索引下推时，存储引擎通过索引检索到数据，然后返回给MySQL服务器，由服务器判断数据是否符合条件。</p></li><li><p>在使用索引下推时，如果处在某些被索引列的判断条件，MySQL服务器会将这一部分的判断条件传递给存储引擎，这时候就不是由服务器去判断这部分条件了，而是由存储引擎判断索引是否符合条件。只有当索引符合条件时，存储引擎才会将检索到的数据返回给MySQL服务器。</p></li></ul><p><strong>索引条件下推可以减少存储引擎查询基础表的次数，也可以减少MySQL服务其从存储引擎接收数据的次数。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>MySQL索引详解：<a href="https://javaguide.cn/database/mysql/mysql-index.html">https://javaguide.cn/database/mysql/mysql-index.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础总结</title>
    <link href="/2023/01/14/MySQL%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/14/MySQL%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL基础总结"><a href="#MySQL基础总结" class="headerlink" title="MySQL基础总结"></a>MySQL基础总结</h1><h2 id="MySQL存储引擎架构"><a href="#MySQL存储引擎架构" class="headerlink" title="MySQL存储引擎架构"></a>MySQL存储引擎架构</h2><ul><li><p>MySQL存储引擎采用的是插件式架构，支持多种存储引擎</p></li><li><p>可以为不同的表设置不同的引擎来适应不同的场景</p></li><li><p>存储引擎是基于表的而非数据库</p></li></ul><h2 id="MyISAM-和-InnoDB-的区别是什么"><a href="#MyISAM-和-InnoDB-的区别是什么" class="headerlink" title="MyISAM 和 InnoDB 的区别是什么"></a>MyISAM 和 InnoDB 的区别是什么</h2><h3 id="1-是否支持行级锁"><a href="#1-是否支持行级锁" class="headerlink" title="1)    是否支持行级锁"></a>1)    是否支持行级锁</h3><p>MyISAM只有表级锁(table-level locking)，而InnoDB支持行级锁(row-level locking)和表级锁，默认为行级锁。</p><h3 id="2-是否支持外键"><a href="#2-是否支持外键" class="headerlink" title="2)    是否支持外键"></a>2)    是否支持外键</h3><p>MyISAM不支持外键，InnoDB支持外键</p><h3 id="3-是否支持事务"><a href="#3-是否支持事务" class="headerlink" title="3)    是否支持事务"></a>3)    是否支持事务</h3><p>MyISAM不支持事务，InnoDB支持事务。隔离级别默认使用可重复读，可以避免幻读的情况发生。</p><h3 id="4-是否支持数据库异常崩溃后的安全恢复"><a href="#4-是否支持数据库异常崩溃后的安全恢复" class="headerlink" title="4)    是否支持数据库异常崩溃后的安全恢复"></a>4)    是否支持数据库异常崩溃后的安全恢复</h3><p>MyISAM不支持，InnoDB支持，数据库重启时依赖redo log。</p><h3 id="5-是否支持MVCC"><a href="#5-是否支持MVCC" class="headerlink" title="5)    是否支持MVCC"></a>5)    是否支持MVCC</h3><p>MVCC是指多版本并发控制。MVCC是在并发访问数据库时，通过对数据进行多版本控制，避免因写锁而导致读操作的堵塞，从而很好的优化并发堵塞问题。仅InnoDB支持。</p><h3 id="6-索引的实现不一样"><a href="#6-索引的实现不一样" class="headerlink" title="6)    索引的实现不一样"></a>6)    索引的实现不一样</h3><p>虽均使用B+Tree作为索引结构，但是两者的实现方式不太一样。</p><p>a)     InnoDB引擎中，其数据文件本身就是索引文件。</p><p>b)    MyISAM，索引文件和数据文件是分离的。</p><p>c)     InnoDB引擎中，表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。</p><h2 id="MySQL-查询缓存"><a href="#MySQL-查询缓存" class="headerlink" title="MySQL 查询缓存"></a>MySQL 查询缓存</h2><p>查询时会先查询缓存，可以提升查询的响应速度，8.0版本移除了该功能。可以通过query_cache_type参数控制是否启用缓存。开启后使用相同的查询条件与数据会直接命中缓存。但是也存在3类无法命中缓存的情况：</p><p>a)     查询条件在字符上存在差异；</p><p>b)    查询中包含用户自定义的函数、存储函数、用户变量、临时表、系统表；</p><p>c)     缓存系统中涉及的表发生变动后，与该表相关的缓存会集体失效</p><p>缓存虽然可以提升查询速度，但是带了额外的开销，不适用于写密集的应用。即便是开启也需要将缓存空间的大小控制在几十MB的范围内。</p><h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><p>广义上的事务是逻辑上的一组操作，要么都执行，要么都不执行。数据库事务指的是保证多个对数据库的操作在宏观上可以被当作一个整体执行，要么一起成功，要么一起失败。</p><p>事务具有四个性质：</p><p>a)     原子性：事务是最小执行单位，不允许分割。该性质保证动作要么全部完成，要么完全不起作用；</p><p>b)    一致性：执行事务前后，数据保持一致。例如转账场景下，转账人与被转账人的总额应该是不变的；</p><p>c)     隔离性：并发访问数据库时，一个用户的事务不会被其他事务所干扰，并发事务之间数据库时独立的；</p><p>d)    持久性：一旦事务被提交执行，那么其对数据库中的数据修改是持久性的，即使数据库发生故障了也不应该对其修改的数据产生任何影响。</p><p>需要说明的是以上提到的原子性、隔离性、持久性均是为了保证一致性。换句话说，原子性、隔离性、持久性是数据库的性质，而一致性则属于应用程序的性质。</p><h2 id="并发事务带来了哪些问题"><a href="#并发事务带来了哪些问题" class="headerlink" title="并发事务带来了哪些问题"></a>并发事务带来了哪些问题</h2><h3 id="1-脏读："><a href="#1-脏读：" class="headerlink" title="1)    脏读："></a>1)    脏读：</h3><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</p><h3 id="2-丢失修改："><a href="#2-丢失修改：" class="headerlink" title="2)    丢失修改："></a>2)    丢失修改：</h3><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p><h3 id="3-不可重复读："><a href="#3-不可重复读：" class="headerlink" title="3)    不可重复读："></a>3)    不可重复读：</h3><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务修改了该数据，那么在第一个事务中会出现两次读取的数据不一致的情况，称之为不可重复读。</p><h3 id="4-幻读："><a href="#4-幻读：" class="headerlink" title="4)    幻读："></a>4)    幻读：</h3><p>幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><h2 id="不可重复读和幻读有什么区别"><a href="#不可重复读和幻读有什么区别" class="headerlink" title="不可重复读和幻读有什么区别"></a>不可重复读和幻读有什么区别</h2><p>不可重复读的重点是内容修改或记录减少比如多次读取一条记录发现其中某些记录的值被修改；</p><p>幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</p><p>幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p><p>举个例子：执行 delete 和 update 操作的时候，可以直接对记录加锁，保证事务安全。而执行 insert 操作的时候，由于记录锁（Record Lock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（Gap Lock）。也就是说执行 insert 操作的时候需要依赖 Next-Key Lock（Record Lock+Gap Lock） 进行加锁来保证不出现幻读。</p><h2 id="SQL-标准定义了哪些事务隔离级别"><a href="#SQL-标准定义了哪些事务隔离级别" class="headerlink" title="SQL 标准定义了哪些事务隔离级别?"></a>SQL 标准定义了哪些事务隔离级别?</h2><p>SQL 标准定义了四个隔离级别：</p><p><strong>READ-UNCOMMITTED(读取未提交)</strong> ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p><p><strong>READ-COMMITTED(读取已提交)</strong> ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p><p><strong>REPEATABLE-READ(可重复读)</strong> ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</p><p><strong>SERIALIZABLE(可串行化)</strong> ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读已提交</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="MySQL-的隔离级别是基于锁实现的吗"><a href="#MySQL-的隔离级别是基于锁实现的吗" class="headerlink" title="MySQL 的隔离级别是基于锁实现的吗"></a>MySQL 的隔离级别是基于锁实现的吗</h2><p>MySQL的隔离级别是基于锁和MVCC共同实现的。其中可串行化是通过锁实现的。剩下的读未提交、读已提交、可重复读均是基于MVCC实现。不过，可串行化之外的其他隔离级别可能也需要用到锁机制，就比如可重复读在当前读情况下需要使用加锁读来保证不会出现幻读。</p><h2 id="MySQL-的默认隔离级别是什么？"><a href="#MySQL-的默认隔离级别是什么？" class="headerlink" title="MySQL 的默认隔离级别是什么？"></a>MySQL 的默认隔离级别是什么？</h2><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是可重复读。</p><h2 id="表级锁和行级锁了解吗？有什么区别？"><a href="#表级锁和行级锁了解吗？有什么区别？" class="headerlink" title="表级锁和行级锁了解吗？有什么区别？"></a>表级锁和行级锁了解吗？有什么区别？</h2><p>MyISAM仅仅支持表级锁，一锁就锁整张表，这在并发写的情况下性能非常差。</p><p>InnoDB不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（一行或者多行），所以其对并发写入操作来说，性能更佳。</p><p>表级锁与行级锁的对比：</p><p><strong>表级锁：</strong>MySQL中粒度最大的一种锁，针对非索引字段加的锁。资源消耗少，加锁快也不会出现死锁。正因为其锁的粒度大，所以发生冲突的概率最高，并发度最低。</p><p><strong>行级锁：</strong>MySQL中粒度最小的一种锁，针对索引字段加的锁，它仅针对当前操作的行记录加锁。由于其粒度小，所以其并发度高，但对应的加锁开销也最大，导致加锁慢,会出现死锁的情况。</p><h2 id="行级锁的使用有什么注意事项？"><a href="#行级锁的使用有什么注意事项？" class="headerlink" title="行级锁的使用有什么注意事项？"></a>行级锁的使用有什么注意事项？</h2><p>行级锁是针对索引字段加的锁，在执行update或者delete语句的过程中，如果where条件没有命中唯一索引或者索引失效，则会对表中所有行记录加锁，因此需要避免这种情况的发生。但是这并不意味着使用了索引就能避免对所有行记录加锁的情况发生，原因在于MySQL优化器可能会让这条查询语句走全表扫描。</p><h2 id="共享锁和排他锁呢？"><a href="#共享锁和排他锁呢？" class="headerlink" title="共享锁和排他锁呢？"></a>共享锁和排他锁呢？</h2><p>表级锁与行级锁均存在<strong>共享锁</strong>与<strong>排他锁</strong>。共享锁(读锁)允许多个事务同时获取，不互斥。排他锁(写锁)，不允许多个事务同时获取，互斥。共享锁仅与共享锁兼容，排他锁与任何锁都不兼容。</p><h2 id="意向锁有什么作用？"><a href="#意向锁有什么作用？" class="headerlink" title="意向锁有什么作用？"></a>意向锁有什么作用？</h2><p>在需要添加表锁的时候，需要判断当前表中是否存在行锁。这时候就需要通过意向锁来快速判断是否可以对表添加表锁。</p><p>意向锁是表级锁，共有两种：</p><p><strong>意向共享锁（Intention Shared Lock，IS 锁）</strong>：事务有意向对表中某些记录添加共享锁时，需要先获取对应的意向共享锁。</p><p><strong>意向排他锁（Intention Exclusive Lock，IX 锁）</strong>：事务有意向对表中某些记录添加排他锁时，需要先获取对应的意向排他锁。</p><p>意向锁由数据库引擎自行维护，用户无法操作。在对行记录添加共享锁或者排他锁的时候，数据库引擎会先获取对应的意向锁。需要说明的是意向锁之间是兼容的，但是与表级的共享锁、排他锁互斥。</p><h2 id="InnoDB-有哪几类行锁？"><a href="#InnoDB-有哪几类行锁？" class="headerlink" title="InnoDB 有哪几类行锁？"></a>InnoDB 有哪几类行锁？</h2><p>MySQL InnoDB 支持三种行锁定方式：</p><ul><li><p><strong>行记录锁（Record Lock）</strong> ：也被称为记录锁，属于单个行记录上的锁。</p></li><li><p><strong>间隙锁（Gap Lock）</strong> ：锁定一个范围，不包括记录本身。</p></li><li><p><strong>临键锁（Next-key Lock）</strong> ：Record Lock+Gap Lock，锁定一个范围，包含记录本身。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。</p></li></ul><p>InnoDB 的默认隔离级别可重复读是可以解决幻读问题发生的，主要有下面两种情况：</p><ul><li><p>快照读（一致性非锁定读） ：由 MVCC 机制来保证不出现幻读。</p></li><li><p>当前读 （一致性锁定读）： 使用 Next-Key Lock 进行加锁来保证不出现幻读。</p></li></ul><h2 id="当前读和快照读有什么区别？"><a href="#当前读和快照读有什么区别？" class="headerlink" title="当前读和快照读有什么区别？"></a>当前读和快照读有什么区别？</h2><p>快照读（一致性非锁定读）就是单纯的 SELECT 语句。所谓快照即记录的历史版本，每行记录可能存在多个历史版本（多版本技术）。</p><p>只有在事务隔离级别 RC(读取已提交) 和 RR（可重读）下，InnoDB 才会使用一致性非锁定读：</p><ul><li><p>在 RC级别下，对于快照数据，一致性非锁定读总是读取被锁定行的最新一份快照数据。</p></li><li><p>在 RR 级别下，对于快照数据，一致性非锁定读总是读取本事务开始时的行数据版本。</p></li></ul><p>快照读比较适合对于数据一致性要求不是特别高且追求极致性能的业务场景。</p><p>当前读 （一致性锁定读）就是给行记录加 X 锁或 S 锁。</p><h2 id="如何解决幻读"><a href="#如何解决幻读" class="headerlink" title="如何解决幻读"></a>如何解决幻读</h2><p>解决幻读的方式有很多，但是它们的核心思想就是一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据了。</p><p>解决幻读的方式主要有以下几种：</p><ul><li><p>将事务隔离级别调整为 SERIALIZABLE 。</p></li><li><p>在可重复读的事务级别下，给事务操作的这张表添加表锁。</p></li><li><p>在可重复读的事务级别下，给事务操作的这张表添加 Next-key Lock（Record Lock+Gap Lock）</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>MySQL常见面试题总结：<a href="https://javaguide.cn/database/mysql/mysql-questions-01.html">https://javaguide.cn/database/mysql/mysql-questions-01.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
